{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { cscNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'csc';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCsc = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n  /**\n   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n   *\n   * To avoid confusion with the matrix cosecant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.csc(x)\n   *\n   * Examples:\n   *\n   *    math.csc(2)      // returns number 1.099750170294617\n   *    1 / math.sin(2)  // returns number 1.099750170294617\n   *\n   * See also:\n   *\n   *    sin, sec, cot\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Cosecant of x\n   */\n\n  return typed(name, {\n    number: cscNumber,\n    Complex: x => x.csc(),\n    BigNumber: x => new _BigNumber(1).div(x.sin())\n  }, trigUnit);\n});","map":{"version":3,"names":["factory","cscNumber","createTrigUnit","name","dependencies","createCsc","_ref","typed","BigNumber","_BigNumber","trigUnit","number","Complex","x","csc","div","sin"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/function/trigonometry/csc.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { cscNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'csc';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCsc = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n  /**\n   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n   *\n   * To avoid confusion with the matrix cosecant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.csc(x)\n   *\n   * Examples:\n   *\n   *    math.csc(2)      // returns number 1.099750170294617\n   *    1 / math.sin(2)  // returns number 1.099750170294617\n   *\n   * See also:\n   *\n   *    sin, sec, cot\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Cosecant of x\n   */\n\n  return typed(name, {\n    number: cscNumber,\n    Complex: x => x.csc(),\n    BigNumber: x => new _BigNumber(1).div(x.sin())\n  }, trigUnit);\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;EACxE,IAAI;IACFC,KADE;IAEFC,SAAS,EAAEC;EAFT,IAGAH,IAHJ;EAIA,IAAII,QAAQ,GAAGR,cAAc,CAAC;IAC5BK;EAD4B,CAAD,CAA7B;EAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOA,KAAK,CAACJ,IAAD,EAAO;IACjBQ,MAAM,EAAEV,SADS;IAEjBW,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACC,GAAF,EAFG;IAGjBN,SAAS,EAAEK,CAAC,IAAI,IAAIJ,UAAJ,CAAe,CAAf,EAAkBM,GAAlB,CAAsBF,CAAC,CAACG,GAAF,EAAtB;EAHC,CAAP,EAITN,QAJS,CAAZ;AAKD,CApC4C,CAAtC"},"metadata":{},"sourceType":"module"}