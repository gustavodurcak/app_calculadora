{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo10xSids';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo10xSids = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  return function matAlgo10xSids(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    } // return dense matrix\n\n\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","map":{"version":3,"names":["factory","name","dependencies","createMatAlgo10xSids","_ref","typed","DenseMatrix","matAlgo10xSids","s","b","callback","inverse","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","Error","rows","columns","dt","cf","convert","find","cdata","x","w","j","mark","k0","k1","k","r","i","data","size","datatype"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo10xSids.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo10xSids';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo10xSids = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo10xSids(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    } // return dense matrix\n\n\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}