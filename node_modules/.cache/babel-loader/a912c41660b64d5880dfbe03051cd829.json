{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { acoshNumber } from '../../plain/number/index.js';\nvar name = 'acosh';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAcosh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the hyperbolic arccos of a value,\n   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acosh(x)\n   *\n   * Examples:\n   *\n   *    math.acosh(1.5)       // returns 0.9624236501192069\n   *\n   * See also:\n   *\n   *    cosh, asinh, atanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arccosine of x\n   */\n\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 1 || config.predictable) {\n        return acoshNumber(x);\n      }\n\n      if (x <= -1) {\n        return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);\n      }\n\n      return new Complex(x, 0).acosh();\n    },\n    Complex: function Complex(x) {\n      return x.acosh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.acosh();\n    }\n  });\n});","map":{"version":3,"names":["factory","acoshNumber","name","dependencies","createAcosh","_ref","typed","config","Complex","number","x","predictable","Math","log","sqrt","PI","acosh","BigNumber"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/function/trigonometry/acosh.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { acoshNumber } from '../../plain/number/index.js';\nvar name = 'acosh';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAcosh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n\n  /**\n   * Calculate the hyperbolic arccos of a value,\n   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acosh(x)\n   *\n   * Examples:\n   *\n   *    math.acosh(1.5)       // returns 0.9624236501192069\n   *\n   * See also:\n   *\n   *    cosh, asinh, atanh\n   *\n   * @param {number | BigNumber | Complex} x  Function input\n   * @return {number | BigNumber | Complex} Hyperbolic arccosine of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 1 || config.predictable) {\n        return acoshNumber(x);\n      }\n\n      if (x <= -1) {\n        return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);\n      }\n\n      return new Complex(x, 0).acosh();\n    },\n    Complex: function Complex(x) {\n      return x.acosh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.acosh();\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;EAC1E,IAAI;IACFC,KADE;IAEFC,MAFE;IAGFC;EAHE,IAIAH,IAJJ;EAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOC,KAAK,CAACJ,IAAD,EAAO;IACjBO,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;MACzB,IAAIA,CAAC,IAAI,CAAL,IAAUH,MAAM,CAACI,WAArB,EAAkC;QAChC,OAAOV,WAAW,CAACS,CAAD,CAAlB;MACD;;MAED,IAAIA,CAAC,IAAI,CAAC,CAAV,EAAa;QACX,OAAO,IAAIF,OAAJ,CAAYI,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,IAAL,CAAUJ,CAAC,GAAGA,CAAJ,GAAQ,CAAlB,IAAuBA,CAAhC,CAAZ,EAAgDE,IAAI,CAACG,EAArD,CAAP;MACD;;MAED,OAAO,IAAIP,OAAJ,CAAYE,CAAZ,EAAe,CAAf,EAAkBM,KAAlB,EAAP;IACD,CAXgB;IAYjBR,OAAO,EAAE,SAASA,OAAT,CAAiBE,CAAjB,EAAoB;MAC3B,OAAOA,CAAC,CAACM,KAAF,EAAP;IACD,CAdgB;IAejBC,SAAS,EAAE,SAASA,SAAT,CAAmBP,CAAnB,EAAsB;MAC/B,OAAOA,CAAC,CAACM,KAAF,EAAP;IACD;EAjBgB,CAAP,CAAZ;AAmBD,CA/C8C,CAAxC"},"metadata":{},"sourceType":"module"}