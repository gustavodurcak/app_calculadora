{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    addScalar,\n    unaryMinus,\n    DenseMatrix\n  } = _ref; // TODO: split function subtract in two: subtract and subtractScalar\n\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  return typed(name, {\n    'number, number': (x, y) => x - y,\n    'Complex, Complex': (x, y) => x.sub(y),\n    'BigNumber, BigNumber': (x, y) => x.minus(y),\n    'Fraction, Fraction': (x, y) => x.sub(y),\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo01xDSid,\n    SD: matAlgo03xDSf,\n    Ss: matAlgo12xSfs,\n    sS: matAlgo10xSids\n  }));\n});","map":{"version":3,"names":["factory","createMatAlgo01xDSid","createMatAlgo03xDSf","createMatAlgo05xSfSf","createMatAlgo10xSids","createMatAlgo12xSfs","createMatrixAlgorithmSuite","name","dependencies","createSubtract","_ref","typed","matrix","equalScalar","addScalar","unaryMinus","DenseMatrix","matAlgo01xDSid","matAlgo03xDSf","matAlgo05xSfSf","matAlgo10xSids","matAlgo12xSfs","matrixAlgorithmSuite","x","y","sub","minus","referToSelf","self","value","Error","equalBase","res","clone","find","valueType","fixPrefix","SS","DS","SD","Ss","sS"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/function/arithmetic/subtract.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    addScalar,\n    unaryMinus,\n    DenseMatrix\n  } = _ref;\n  // TODO: split function subtract in two: subtract and subtractScalar\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  return typed(name, {\n    'number, number': (x, y) => x - y,\n    'Complex, Complex': (x, y) => x.sub(y),\n    'BigNumber, BigNumber': (x, y) => x.minus(y),\n    'Fraction, Fraction': (x, y) => x.sub(y),\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo01xDSid,\n    SD: matAlgo03xDSf,\n    Ss: matAlgo12xSfs,\n    sS: matAlgo10xSids\n  }));\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}