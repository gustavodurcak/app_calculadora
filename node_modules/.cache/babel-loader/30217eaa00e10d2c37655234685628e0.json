{"ast":null,"code":"import { isConstantNode, isParenthesisNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { createEmptyMap, createMap } from '../../utils/map.js';\nvar name = 'simplify';\nvar dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', 'resolve', 'simplifyConstant', 'simplifyCore', '?fraction', '?bignumber', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    parse,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    isZero,\n    equal,\n    resolve,\n    simplifyConstant,\n    simplifyCore,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    matrix,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var {\n    hasProperty,\n    isCommutative,\n    isAssociative,\n    mergeContext,\n    flatten,\n    unflattenr,\n    unflattenl,\n    createMakeNodeFunction,\n    defaultContext,\n    realContext,\n    positiveContext\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     const rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules. Note that since\n   * the `simplifyCore` function is in the default list of rules, by default\n   * simplify will convert any function calls in the expression that have\n   * operator equivalents to their operator forms.\n   *\n   * To specify a rule as a string, separate the left and right pattern by '->'\n   * When specifying a rule as an object, the following keys are meaningful:\n   * - l - the left pattern\n   * - r - the right pattern\n   * - s - in lieu of l and r, the string form that is broken at -> to give them\n   * - repeat - whether to repeat this rule until the expression stabilizes\n   * - assuming - gives a context object, as in the 'context' option to\n   *     simplify. Every property in the context object must match the current\n   *     context in order, or else the rule will not be applied.\n   * - imposeContext - gives a context object, as in the 'context' option to\n   *     simplify. Any settings specified will override the incoming context\n   *     for all matches of this rule.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   *  An optional `options` argument can be passed as last argument of `simplify`.\n   *  Currently available options (defaults in parentheses):\n   *  - `consoleDebug` (false): whether to write the expression being simplified\n   *    and any changes to it, along with the rule responsible, to console\n   *  - `context` (simplify.defaultContext): an object giving properties of\n   *    each operator, which determine what simplifications are allowed. The\n   *    currently meaningful properties are commutative, associative,\n   *    total (whether the operation is defined for all arguments), and\n   *    trivial (whether the operation applied to a single argument leaves\n   *    that argument unchanged). The default context is very permissive and\n   *    allows almost all simplifications. Only properties differing from\n   *    the default need to be specified; the default context is used as a\n   *    fallback. Additional contexts `simplify.realContext` and\n   *    `simplify.positiveContext` are supplied to cause simplify to perform\n   *    just simplifications guaranteed to preserve all values of the expression\n   *    assuming all variables and subexpressions are real numbers or\n   *    positive real numbers, respectively. (Note that these are in some cases\n   *    more restrictive than the default context; for example, the default\n   *    context will allow `x/x` to simplify to 1, whereas\n   *    `simplify.realContext` will not, as `0/0` is not equal to 1.)\n   *  - `exactFractions` (true): whether to try to convert all constants to\n   *    exact rational numbers.\n   *  - `fractionsLimit` (10000): when `exactFractions` is true, constants will\n   *    be expressed as fractions only when both numerator and denominator\n   *    are smaller than `fractionsLimit`.\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules, scope)\n   *     simplify(expr, rules, scope, options)\n   *     simplify(expr, scope)\n   *     simplify(expr, scope, options)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify(f)                          // Node \"2 * x\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\n   *\n   * See also:\n   *\n   *     simplifyCore, derivative, evaluate, parse, rationalize, resolve\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {SimplifyRule[]} [rules]\n   *            Optional list with custom rules\n   * @param {Object} [scope] Optional scope with variables\n   * @param {SimplifyOptions} [options] Optional configuration settings\n   * @return {Node} Returns the simplified form of `expr`\n   */\n\n  typed.addConversion({\n    from: 'Object',\n    to: 'Map',\n    convert: createMap\n  });\n  var simplify = typed('simplify', {\n    Node: _simplify,\n    'Node, Map': (expr, scope) => _simplify(expr, false, scope),\n    'Node, Map, Object': (expr, scope, options) => _simplify(expr, false, scope, options),\n    'Node, Array': _simplify,\n    'Node, Array, Map': _simplify,\n    'Node, Array, Map, Object': _simplify\n  });\n  typed.removeConversion({\n    from: 'Object',\n    to: 'Map',\n    convert: createMap\n  });\n  simplify.defaultContext = defaultContext;\n  simplify.realContext = realContext;\n  simplify.positiveContext = positiveContext;\n\n  function removeParens(node) {\n    return node.transform(function (node, path, parent) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  } // All constants that are allowed in rules\n\n\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true // null: false,\n    // undefined: false,\n    // version: false,\n\n  }; // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n\n  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  }, // temporary rules\n  // Note initially we tend constants to the right because like-term\n  // collection prefers the left, and we would rather collect nonconstants\n  {\n    s: 'n-n1 -> n+-n1',\n    // temporarily replace 'subtract' so we can further flatten the 'add' operator\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n-n -> 0',\n    // partial alternative when we can't always subtract\n    assuming: {\n      subtract: {\n        total: false\n      }\n    }\n  }, {\n    s: '-(c*v) -> v * (-c)',\n    // make non-constant terms positive\n    assuming: {\n      multiply: {\n        commutative: true\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(c*v) -> (-c) * v',\n    // non-commutative version, part 1\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(v*c) -> v * (-c)',\n    // non-commutative version, part 2\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    l: '-(n1/n2)',\n    r: '-n1/n2'\n  }, {\n    l: '-v',\n    r: 'v * (-1)'\n  }, // finish making non-constant terms positive\n  {\n    l: '(n1 + n2)*(-1)',\n    r: 'n1*(-1) + n2*(-1)',\n    repeat: true\n  }, // expand negations to achieve as much sign cancellation as possible\n  {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  }, {\n    s: '(n1*n2)^n3 -> n1^n3 * n2^n3',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: '(n1*n2)^(-1) -> n2^(-1) * n1^(-1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // expand nested exponentiation\n  {\n    s: '(n ^ n1) ^ n2 -> n ^ (n1 * n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // 1/(1/n) = n needs 1/n to exist\n\n  }, // collect like factors; into a sum, only do this for nonconstants\n  {\n    l: ' v   * ( v   * n1 + n2)',\n    r: 'v^2       * n1 +  v   * n2'\n  }, {\n    s: ' v   * (v^n4 * n1 + n2)   ->  v^(1+n4)  * n1 +  v   * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // v*1/v = v^(1+-1) needs 1/v\n\n  }, {\n    s: 'v^n3 * ( v   * n1 + n2)   ->  v^(n3+1)  * n1 + v^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    s: 'v^n3 * (v^n4 * n1 + n2)   ->  v^(n3+n4) * n1 + v^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    s: 'n * n^n1 -> n^(n1+1)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // n*1/n = n^(-1+1) needs 1/n\n\n  }, {\n    s: 'n^n1 * n^n2 -> n^(n1+n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // ditto for n^2*1/n^2\n\n  }, // Unfortunately, to deal with more complicated cancellations, it\n  // becomes necessary to simplify constants twice per pass. It's not\n  // terribly expensive compared to matching rules, so this should not\n  // pose a performance problem.\n  simplifyConstant, // First: before collecting like terms\n  // collect like terms\n  {\n    s: 'n+n -> 2*n',\n    assuming: {\n      add: {\n        total: true\n      }\n    } // 2 = 1 + 1 needs to exist\n\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'v*n + v',\n    r: 'v*(n+1)'\n  }, // NOTE: leftmost position is special:\n  {\n    l: 'n3*n1 + n3*n2',\n    r: 'n3*(n1+n2)'\n  }, // All sub-monomials tried there.\n  {\n    l: 'n3^(-n4)*n1 +   n3  * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+1) *n2)'\n  }, {\n    l: 'n3^(-n4)*n1 + n3^n5 * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+n5)*n2)'\n  }, {\n    s: 'n*v + v -> (n+1)*v',\n    // noncommutative additional cases\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3 + n2*n3 -> (n1+n2)*n3',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3    -> (n1 + n2*n3^(n4 +  1))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3^n5 -> (n1 + n2*n3^(n4 + n5))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'n*c + c',\n    r: '(n+1)*c'\n  }, {\n    s: 'c*n + c -> c*(n+1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, simplifyConstant, // Second: before returning expressions to \"standard form\"\n  // make factors positive (and undo 'make non-constant terms positive')\n  {\n    s: '(-n)*n1 -> -(n*n1)',\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n1*(-n) -> -(n1*n)',\n    // in case * non-commutative\n    assuming: {\n      subtract: {\n        total: true\n      },\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // final ordering of constants\n  {\n    s: 'c+v -> v+c',\n    assuming: {\n      add: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'v*c -> c*v',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  }, // undo replace 'subtract'\n  {\n    s: 'n*(n1^-1) -> n/n1',\n    // undo replace 'divide'; for * commutative\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    s: 'n*n1^-n2 -> n/n1^n2',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    s: 'n^-1 -> 1/n',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    l: 'n^1',\n    r: 'n'\n  }, // can be produced by power cancellation\n  {\n    s: 'n*(n1/n2) -> (n*n1)/n2',\n    // '*' before '/'\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    s: 'n-(n1+n2) -> n-n1-n2',\n    // '-' before '+'\n    assuming: {\n      addition: {\n        associative: true,\n        commutative: true\n      }\n    }\n  }, // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n  // simplifyConstant can leave an extra factor of 1, which can always\n  // be eliminated, since the identity always commutes\n  {\n    l: '1*n',\n    r: 'n',\n    imposeContext: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: 'n1/(n2/n3) -> (n1*n3)/n2',\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    l: 'n1/(-n2)',\n    r: '-n1/n2'\n  }];\n  /**\n   * Takes any rule object as allowed by the specification in simplify\n   * and puts it in a standard form used by applyRule\n   */\n\n  function _canonicalizeRule(ruleObject, context) {\n    var newRule = {};\n\n    if (ruleObject.s) {\n      var lr = ruleObject.s.split('->');\n\n      if (lr.length === 2) {\n        newRule.l = lr[0];\n        newRule.r = lr[1];\n      } else {\n        throw SyntaxError('Could not parse rule: ' + ruleObject.s);\n      }\n    } else {\n      newRule.l = ruleObject.l;\n      newRule.r = ruleObject.r;\n    }\n\n    newRule.l = removeParens(parse(newRule.l));\n    newRule.r = removeParens(parse(newRule.r));\n\n    for (var prop of ['imposeContext', 'repeat', 'assuming']) {\n      if (prop in ruleObject) {\n        newRule[prop] = ruleObject[prop];\n      }\n    }\n\n    if (ruleObject.evaluate) {\n      newRule.evaluate = parse(ruleObject.evaluate);\n    }\n\n    if (isAssociative(newRule.l, context)) {\n      var makeNode = createMakeNodeFunction(newRule.l);\n\n      var expandsym = _getExpandPlaceholderSymbol();\n\n      newRule.expanded = {};\n      newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.\n      // This helps to match the newRule against nodes returned from getSplits() later on.\n\n      flatten(newRule.expanded.l, context);\n      unflattenr(newRule.expanded.l, context);\n      newRule.expanded.r = makeNode([newRule.r, expandsym]);\n    }\n\n    return newRule;\n  }\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n\n\n  function _buildRules(rules, context) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n      var ruleType = typeof rule;\n\n      switch (ruleType) {\n        case 'string':\n          rule = {\n            s: rule\n          };\n\n        /* falls through */\n\n        case 'object':\n          newRule = _canonicalizeRule(rule, context);\n          break;\n\n        case 'function':\n          newRule = rule;\n          break;\n\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      } // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n\n\n      ruleSet.push(newRule);\n    }\n\n    return ruleSet;\n  }\n\n  var _lastsym = 0;\n\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n\n  function _simplify(expr, rules) {\n    var scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : createEmptyMap();\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var debug = options.consoleDebug;\n    rules = _buildRules(rules || simplify.rules, options.context);\n    var res = resolve(expr, scope);\n    res = removeParens(res);\n    var visited = {};\n    var str = res.toString({\n      parenthesis: 'all'\n    });\n\n    while (!visited[str]) {\n      visited[str] = true;\n      _lastsym = 0; // counter for placeholder symbols\n\n      var laststr = str;\n      if (debug) console.log('Working on: ', str);\n\n      for (var i = 0; i < rules.length; i++) {\n        var rulestr = '';\n\n        if (typeof rules[i] === 'function') {\n          res = rules[i](res, options);\n          if (debug) rulestr = rules[i].name;\n        } else {\n          flatten(res, options.context);\n          res = applyRule(res, rules[i], options.context);\n\n          if (debug) {\n            rulestr = \"\".concat(rules[i].l.toString(), \" -> \").concat(rules[i].r.toString());\n          }\n        }\n\n        if (debug) {\n          var newstr = res.toString({\n            parenthesis: 'all'\n          });\n\n          if (newstr !== laststr) {\n            console.log('Applying', rulestr, 'produced', newstr);\n            laststr = newstr;\n          }\n        }\n        /* Use left-heavy binary tree internally,\n         * since custom rule functions may expect it\n         */\n\n\n        unflattenl(res, options.context);\n      }\n\n      str = res.toString({\n        parenthesis: 'all'\n      });\n    }\n\n    return res;\n  }\n\n  function mapRule(nodes, rule, context) {\n    var resNodes = nodes;\n\n    if (nodes) {\n      for (var i = 0; i < nodes.length; ++i) {\n        var newNode = applyRule(nodes[i], rule, context);\n\n        if (newNode !== nodes[i]) {\n          if (resNodes === nodes) {\n            resNodes = nodes.slice();\n          }\n\n          resNodes[i] = newNode;\n        }\n      }\n    }\n\n    return resNodes;\n  }\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object | Function} rule\n   * @param  {Object} context -- information about assumed properties of operators\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n\n\n  function applyRule(node, rule, context) {\n    //    console.log('Entering applyRule(\"', rule.l.toString({parenthesis:'all'}), '->', rule.r.toString({parenthesis:'all'}), '\",', node.toString({parenthesis:'all'}),')')\n    // check that the assumptions for this rule are satisfied by the current\n    // context:\n    if (rule.assuming) {\n      for (var symbol in rule.assuming) {\n        for (var property in rule.assuming[symbol]) {\n          if (hasProperty(symbol, property, context) !== rule.assuming[symbol][property]) {\n            return node;\n          }\n        }\n      }\n    }\n\n    var mergedContext = mergeContext(rule.imposeContext, context); // Do not clone node unless we find a match\n\n    var res = node; // First replace our child nodes with their simplified versions\n    // If a child could not be simplified, applying the rule to it\n    // will have no effect since the node is returned unchanged\n\n    if (res instanceof OperatorNode || res instanceof FunctionNode) {\n      var newArgs = mapRule(res.args, rule, context);\n\n      if (newArgs !== res.args) {\n        res = res.clone();\n        res.args = newArgs;\n      }\n    } else if (res instanceof ParenthesisNode) {\n      if (res.content) {\n        var newContent = applyRule(res.content, rule, context);\n\n        if (newContent !== res.content) {\n          res = new ParenthesisNode(newContent);\n        }\n      }\n    } else if (res instanceof ArrayNode) {\n      var newItems = mapRule(res.items, rule, context);\n\n      if (newItems !== res.items) {\n        res = new ArrayNode(newItems);\n      }\n    } else if (res instanceof AccessorNode) {\n      var newObj = res.object;\n\n      if (res.object) {\n        newObj = applyRule(res.object, rule, context);\n      }\n\n      var newIndex = res.index;\n\n      if (res.index) {\n        newIndex = applyRule(res.index, rule, context);\n      }\n\n      if (newObj !== res.object || newIndex !== res.index) {\n        res = new AccessorNode(newObj, newIndex);\n      }\n    } else if (res instanceof IndexNode) {\n      var newDims = mapRule(res.dimensions, rule, context);\n\n      if (newDims !== res.dimensions) {\n        res = new IndexNode(newDims);\n      }\n    } else if (res instanceof ObjectNode) {\n      var changed = false;\n      var newProps = {};\n\n      for (var prop in res.properties) {\n        newProps[prop] = applyRule(res.properties[prop], rule, context);\n\n        if (newProps[prop] !== res.properties[prop]) {\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        res = new ObjectNode(newProps);\n      }\n    } // Try to match a rule against this node\n\n\n    var repl = rule.r;\n\n    var matches = _ruleMatch(rule.l, res, mergedContext)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.\n    // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n\n\n    if (!matches && rule.expanded) {\n      repl = rule.expanded.r;\n      matches = _ruleMatch(rule.expanded.l, res, mergedContext)[0];\n    }\n\n    if (matches) {\n      // const before = res.toString({parenthesis: 'all'})\n      // Create a new node by cloning the rhs of the matched rule\n      // we keep any implicit multiplication state if relevant\n      var implicit = res.implicit;\n      res = repl.clone();\n\n      if (implicit && 'implicit' in repl) {\n        res.implicit = true;\n      } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n\n\n      res = res.transform(function (node) {\n        if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n          return matches.placeholders[node.name].clone();\n        } else {\n          return node;\n        }\n      }); // const after = res.toString({parenthesis: 'all'})\n      // console.log('Simplified ' + before + ' to ' + after)\n    }\n\n    if (rule.repeat && res !== node) {\n      res = applyRule(res, rule, context);\n    }\n\n    return res;\n  }\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n\n\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      // Keep order, but try all parenthesizations\n      for (var _i = 1; _i < node.args.length; _i++) {\n        var left = node.args[0];\n\n        if (_i > 1) {\n          left = makeNode(node.args.slice(0, _i));\n        }\n\n        rightArgs = node.args.slice(_i);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([left, right]));\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n\n\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    }; // Some matches may not have placeholders; this is OK\n\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    } // Placeholders with the same key must match exactly\n\n\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n\n\n  function combineChildMatches(list1, list2) {\n    var res = [];\n\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n\n    var merged;\n\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n\n\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n\n    return uniqueSets;\n  }\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param {Object} context -- provides assumed properties of operators\n   * @param {Boolean} isSplit -- whether we are in process of splitting an\n   *                    n-ary operator node into possible binary combinations.\n   *                    Defaults to false.\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _ruleMatch(rule, node, context, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n    //    console.log('Entering _ruleMatch(', rule.toString({parenthesis:'all'}), ', ', node.toString({parenthesis:'all'}), ', ', context, ')')\n    var res = [{\n      placeholders: {}\n    }];\n\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } // rule and node match. Search the children of rule and node.\n\n\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node, context) && node.args.length === rule.args.length || isSplit) {\n        // Expect non-associative operators to match exactly,\n        // except in any order if operator is commutative\n        var childMatches = [];\n\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i], context);\n\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            break;\n          } // The child matched, so add the information returned from the child to our result\n\n\n          childMatches.push(childMatch);\n        }\n\n        if (childMatches.length !== rule.args.length) {\n          if (!isCommutative(node, context) || // exact match in order needed\n          rule.args.length === 1) {\n            // nothing to commute\n            return [];\n          }\n\n          if (rule.args.length > 2) {\n            /* Need to generate all permutations and try them.\n             * It's a bit complicated, and unlikely to come up since there\n             * are very few ternary or higher operators. So punt for now.\n             */\n            throw new Error('permuting >2 commutative non-associative rule arguments not yet implemented');\n          }\n          /* Exactly two arguments, try them reversed */\n\n\n          var leftMatch = _ruleMatch(rule.args[0], node.args[1], context);\n\n          if (leftMatch.length === 0) {\n            return [];\n          }\n\n          var rightMatch = _ruleMatch(rule.args[1], node.args[0], context);\n\n          if (rightMatch.length === 0) {\n            return [];\n          }\n\n          childMatches = [leftMatch, rightMatch];\n        }\n\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, context);\n        var splitMatches = [];\n\n        for (var _i2 = 0; _i2 < splits.length; _i2++) {\n          var matchSet = _ruleMatch(rule, splits[_i2], context, true); // recursing at the same tree depth here\n\n\n          splitMatches = splitMatches.concat(matchSet);\n        }\n\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      } else if (rule.name[0] === 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if (!isConstantNode(node)) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      } else if (rule.name[0] === 'c') {\n        // rule matches any ConstantNode\n        if (node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      } else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    } // It's a match!\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n\n\n    return res;\n  }\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  return simplify;\n});","map":{"version":3,"names":["isConstantNode","isParenthesisNode","factory","createUtil","hasOwnProperty","createEmptyMap","createMap","name","dependencies","createSimplify","_ref","config","typed","parse","add","subtract","multiply","divide","pow","isZero","equal","resolve","simplifyConstant","simplifyCore","fraction","bignumber","mathWithTransform","matrix","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","ParenthesisNode","SymbolNode","hasProperty","isCommutative","isAssociative","mergeContext","flatten","unflattenr","unflattenl","createMakeNodeFunction","defaultContext","realContext","positiveContext","addConversion","from","to","convert","simplify","Node","_simplify","expr","scope","options","removeConversion","removeParens","node","transform","path","parent","content","SUPPORTED_CONSTANTS","true","false","e","i","Infinity","LN2","LN10","LOG2E","LOG10E","NaN","phi","pi","SQRT1_2","SQRT2","tau","rules","l","r","s","assuming","total","commutative","repeat","imposeContext","associative","addition","_canonicalizeRule","ruleObject","context","newRule","lr","split","length","SyntaxError","prop","evaluate","makeNode","expandsym","_getExpandPlaceholderSymbol","expanded","clone","_buildRules","ruleSet","rule","ruleType","TypeError","push","_lastsym","arguments","undefined","debug","consoleDebug","res","visited","str","toString","parenthesis","laststr","console","log","rulestr","applyRule","concat","newstr","mapRule","nodes","resNodes","newNode","slice","symbol","property","mergedContext","newArgs","args","newContent","newItems","items","newObj","object","newIndex","index","newDims","dimensions","changed","newProps","properties","repl","matches","_ruleMatch","implicit","isSymbolNode","placeholders","getSplits","right","rightArgs","splice","_i","left","mergeMatch","match1","match2","key","_exactMatch","_key","combineChildMatches","list1","list2","merged","i1","i2","mergeChildMatches","childMatches","sets","reduce","uniqueSets","unique","JSON","stringify","isSplit","op","fn","childMatch","Error","leftMatch","rightMatch","splits","splitMatches","_i2","matchSet","substring","value","p","q"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/function/algebra/simplify.js"],"sourcesContent":["import { isConstantNode, isParenthesisNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { createEmptyMap, createMap } from '../../utils/map.js';\nvar name = 'simplify';\nvar dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', 'resolve', 'simplifyConstant', 'simplifyCore', '?fraction', '?bignumber', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    parse,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    isZero,\n    equal,\n    resolve,\n    simplifyConstant,\n    simplifyCore,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    matrix,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var {\n    hasProperty,\n    isCommutative,\n    isAssociative,\n    mergeContext,\n    flatten,\n    unflattenr,\n    unflattenl,\n    createMakeNodeFunction,\n    defaultContext,\n    realContext,\n    positiveContext\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     const rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules. Note that since\n   * the `simplifyCore` function is in the default list of rules, by default\n   * simplify will convert any function calls in the expression that have\n   * operator equivalents to their operator forms.\n   *\n   * To specify a rule as a string, separate the left and right pattern by '->'\n   * When specifying a rule as an object, the following keys are meaningful:\n   * - l - the left pattern\n   * - r - the right pattern\n   * - s - in lieu of l and r, the string form that is broken at -> to give them\n   * - repeat - whether to repeat this rule until the expression stabilizes\n   * - assuming - gives a context object, as in the 'context' option to\n   *     simplify. Every property in the context object must match the current\n   *     context in order, or else the rule will not be applied.\n   * - imposeContext - gives a context object, as in the 'context' option to\n   *     simplify. Any settings specified will override the incoming context\n   *     for all matches of this rule.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   *  An optional `options` argument can be passed as last argument of `simplify`.\n   *  Currently available options (defaults in parentheses):\n   *  - `consoleDebug` (false): whether to write the expression being simplified\n   *    and any changes to it, along with the rule responsible, to console\n   *  - `context` (simplify.defaultContext): an object giving properties of\n   *    each operator, which determine what simplifications are allowed. The\n   *    currently meaningful properties are commutative, associative,\n   *    total (whether the operation is defined for all arguments), and\n   *    trivial (whether the operation applied to a single argument leaves\n   *    that argument unchanged). The default context is very permissive and\n   *    allows almost all simplifications. Only properties differing from\n   *    the default need to be specified; the default context is used as a\n   *    fallback. Additional contexts `simplify.realContext` and\n   *    `simplify.positiveContext` are supplied to cause simplify to perform\n   *    just simplifications guaranteed to preserve all values of the expression\n   *    assuming all variables and subexpressions are real numbers or\n   *    positive real numbers, respectively. (Note that these are in some cases\n   *    more restrictive than the default context; for example, the default\n   *    context will allow `x/x` to simplify to 1, whereas\n   *    `simplify.realContext` will not, as `0/0` is not equal to 1.)\n   *  - `exactFractions` (true): whether to try to convert all constants to\n   *    exact rational numbers.\n   *  - `fractionsLimit` (10000): when `exactFractions` is true, constants will\n   *    be expressed as fractions only when both numerator and denominator\n   *    are smaller than `fractionsLimit`.\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules, scope)\n   *     simplify(expr, rules, scope, options)\n   *     simplify(expr, scope)\n   *     simplify(expr, scope, options)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify(f)                          // Node \"2 * x\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\n   *\n   * See also:\n   *\n   *     simplifyCore, derivative, evaluate, parse, rationalize, resolve\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {SimplifyRule[]} [rules]\n   *            Optional list with custom rules\n   * @param {Object} [scope] Optional scope with variables\n   * @param {SimplifyOptions} [options] Optional configuration settings\n   * @return {Node} Returns the simplified form of `expr`\n   */\n\n  typed.addConversion({\n    from: 'Object',\n    to: 'Map',\n    convert: createMap\n  });\n  var simplify = typed('simplify', {\n    Node: _simplify,\n    'Node, Map': (expr, scope) => _simplify(expr, false, scope),\n    'Node, Map, Object': (expr, scope, options) => _simplify(expr, false, scope, options),\n    'Node, Array': _simplify,\n    'Node, Array, Map': _simplify,\n    'Node, Array, Map, Object': _simplify\n  });\n  typed.removeConversion({\n    from: 'Object',\n    to: 'Map',\n    convert: createMap\n  });\n  simplify.defaultContext = defaultContext;\n  simplify.realContext = realContext;\n  simplify.positiveContext = positiveContext;\n\n  function removeParens(node) {\n    return node.transform(function (node, path, parent) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  } // All constants that are allowed in rules\n\n\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true // null: false,\n    // undefined: false,\n    // version: false,\n\n  }; // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n\n  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  }, // temporary rules\n  // Note initially we tend constants to the right because like-term\n  // collection prefers the left, and we would rather collect nonconstants\n  {\n    s: 'n-n1 -> n+-n1',\n    // temporarily replace 'subtract' so we can further flatten the 'add' operator\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n-n -> 0',\n    // partial alternative when we can't always subtract\n    assuming: {\n      subtract: {\n        total: false\n      }\n    }\n  }, {\n    s: '-(c*v) -> v * (-c)',\n    // make non-constant terms positive\n    assuming: {\n      multiply: {\n        commutative: true\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(c*v) -> (-c) * v',\n    // non-commutative version, part 1\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(v*c) -> v * (-c)',\n    // non-commutative version, part 2\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    l: '-(n1/n2)',\n    r: '-n1/n2'\n  }, {\n    l: '-v',\n    r: 'v * (-1)'\n  }, // finish making non-constant terms positive\n  {\n    l: '(n1 + n2)*(-1)',\n    r: 'n1*(-1) + n2*(-1)',\n    repeat: true\n  }, // expand negations to achieve as much sign cancellation as possible\n  {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  }, {\n    s: '(n1*n2)^n3 -> n1^n3 * n2^n3',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: '(n1*n2)^(-1) -> n2^(-1) * n1^(-1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // expand nested exponentiation\n  {\n    s: '(n ^ n1) ^ n2 -> n ^ (n1 * n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // 1/(1/n) = n needs 1/n to exist\n\n  }, // collect like factors; into a sum, only do this for nonconstants\n  {\n    l: ' v   * ( v   * n1 + n2)',\n    r: 'v^2       * n1 +  v   * n2'\n  }, {\n    s: ' v   * (v^n4 * n1 + n2)   ->  v^(1+n4)  * n1 +  v   * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // v*1/v = v^(1+-1) needs 1/v\n\n  }, {\n    s: 'v^n3 * ( v   * n1 + n2)   ->  v^(n3+1)  * n1 + v^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    s: 'v^n3 * (v^n4 * n1 + n2)   ->  v^(n3+n4) * n1 + v^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    s: 'n * n^n1 -> n^(n1+1)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // n*1/n = n^(-1+1) needs 1/n\n\n  }, {\n    s: 'n^n1 * n^n2 -> n^(n1+n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // ditto for n^2*1/n^2\n\n  }, // Unfortunately, to deal with more complicated cancellations, it\n  // becomes necessary to simplify constants twice per pass. It's not\n  // terribly expensive compared to matching rules, so this should not\n  // pose a performance problem.\n  simplifyConstant, // First: before collecting like terms\n  // collect like terms\n  {\n    s: 'n+n -> 2*n',\n    assuming: {\n      add: {\n        total: true\n      }\n    } // 2 = 1 + 1 needs to exist\n\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'v*n + v',\n    r: 'v*(n+1)'\n  }, // NOTE: leftmost position is special:\n  {\n    l: 'n3*n1 + n3*n2',\n    r: 'n3*(n1+n2)'\n  }, // All sub-monomials tried there.\n  {\n    l: 'n3^(-n4)*n1 +   n3  * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+1) *n2)'\n  }, {\n    l: 'n3^(-n4)*n1 + n3^n5 * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+n5)*n2)'\n  }, {\n    s: 'n*v + v -> (n+1)*v',\n    // noncommutative additional cases\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3 + n2*n3 -> (n1+n2)*n3',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3    -> (n1 + n2*n3^(n4 +  1))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3^n5 -> (n1 + n2*n3^(n4 + n5))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'n*c + c',\n    r: '(n+1)*c'\n  }, {\n    s: 'c*n + c -> c*(n+1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, simplifyConstant, // Second: before returning expressions to \"standard form\"\n  // make factors positive (and undo 'make non-constant terms positive')\n  {\n    s: '(-n)*n1 -> -(n*n1)',\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n1*(-n) -> -(n1*n)',\n    // in case * non-commutative\n    assuming: {\n      subtract: {\n        total: true\n      },\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // final ordering of constants\n  {\n    s: 'c+v -> v+c',\n    assuming: {\n      add: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'v*c -> c*v',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  }, // undo replace 'subtract'\n  {\n    s: 'n*(n1^-1) -> n/n1',\n    // undo replace 'divide'; for * commutative\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    s: 'n*n1^-n2 -> n/n1^n2',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    s: 'n^-1 -> 1/n',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    l: 'n^1',\n    r: 'n'\n  }, // can be produced by power cancellation\n  {\n    s: 'n*(n1/n2) -> (n*n1)/n2',\n    // '*' before '/'\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    s: 'n-(n1+n2) -> n-n1-n2',\n    // '-' before '+'\n    assuming: {\n      addition: {\n        associative: true,\n        commutative: true\n      }\n    }\n  }, // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n  // simplifyConstant can leave an extra factor of 1, which can always\n  // be eliminated, since the identity always commutes\n  {\n    l: '1*n',\n    r: 'n',\n    imposeContext: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: 'n1/(n2/n3) -> (n1*n3)/n2',\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    l: 'n1/(-n2)',\n    r: '-n1/n2'\n  }];\n  /**\n   * Takes any rule object as allowed by the specification in simplify\n   * and puts it in a standard form used by applyRule\n   */\n\n  function _canonicalizeRule(ruleObject, context) {\n    var newRule = {};\n\n    if (ruleObject.s) {\n      var lr = ruleObject.s.split('->');\n\n      if (lr.length === 2) {\n        newRule.l = lr[0];\n        newRule.r = lr[1];\n      } else {\n        throw SyntaxError('Could not parse rule: ' + ruleObject.s);\n      }\n    } else {\n      newRule.l = ruleObject.l;\n      newRule.r = ruleObject.r;\n    }\n\n    newRule.l = removeParens(parse(newRule.l));\n    newRule.r = removeParens(parse(newRule.r));\n\n    for (var prop of ['imposeContext', 'repeat', 'assuming']) {\n      if (prop in ruleObject) {\n        newRule[prop] = ruleObject[prop];\n      }\n    }\n\n    if (ruleObject.evaluate) {\n      newRule.evaluate = parse(ruleObject.evaluate);\n    }\n\n    if (isAssociative(newRule.l, context)) {\n      var makeNode = createMakeNodeFunction(newRule.l);\n\n      var expandsym = _getExpandPlaceholderSymbol();\n\n      newRule.expanded = {};\n      newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.\n      // This helps to match the newRule against nodes returned from getSplits() later on.\n\n      flatten(newRule.expanded.l, context);\n      unflattenr(newRule.expanded.l, context);\n      newRule.expanded.r = makeNode([newRule.r, expandsym]);\n    }\n\n    return newRule;\n  }\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n\n\n  function _buildRules(rules, context) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n      var ruleType = typeof rule;\n\n      switch (ruleType) {\n        case 'string':\n          rule = {\n            s: rule\n          };\n\n        /* falls through */\n\n        case 'object':\n          newRule = _canonicalizeRule(rule, context);\n          break;\n\n        case 'function':\n          newRule = rule;\n          break;\n\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      } // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n\n\n      ruleSet.push(newRule);\n    }\n\n    return ruleSet;\n  }\n\n  var _lastsym = 0;\n\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n\n  function _simplify(expr, rules) {\n    var scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : createEmptyMap();\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var debug = options.consoleDebug;\n    rules = _buildRules(rules || simplify.rules, options.context);\n    var res = resolve(expr, scope);\n    res = removeParens(res);\n    var visited = {};\n    var str = res.toString({\n      parenthesis: 'all'\n    });\n\n    while (!visited[str]) {\n      visited[str] = true;\n      _lastsym = 0; // counter for placeholder symbols\n\n      var laststr = str;\n      if (debug) console.log('Working on: ', str);\n\n      for (var i = 0; i < rules.length; i++) {\n        var rulestr = '';\n\n        if (typeof rules[i] === 'function') {\n          res = rules[i](res, options);\n          if (debug) rulestr = rules[i].name;\n        } else {\n          flatten(res, options.context);\n          res = applyRule(res, rules[i], options.context);\n\n          if (debug) {\n            rulestr = \"\".concat(rules[i].l.toString(), \" -> \").concat(rules[i].r.toString());\n          }\n        }\n\n        if (debug) {\n          var newstr = res.toString({\n            parenthesis: 'all'\n          });\n\n          if (newstr !== laststr) {\n            console.log('Applying', rulestr, 'produced', newstr);\n            laststr = newstr;\n          }\n        }\n        /* Use left-heavy binary tree internally,\n         * since custom rule functions may expect it\n         */\n\n\n        unflattenl(res, options.context);\n      }\n\n      str = res.toString({\n        parenthesis: 'all'\n      });\n    }\n\n    return res;\n  }\n\n  function mapRule(nodes, rule, context) {\n    var resNodes = nodes;\n\n    if (nodes) {\n      for (var i = 0; i < nodes.length; ++i) {\n        var newNode = applyRule(nodes[i], rule, context);\n\n        if (newNode !== nodes[i]) {\n          if (resNodes === nodes) {\n            resNodes = nodes.slice();\n          }\n\n          resNodes[i] = newNode;\n        }\n      }\n    }\n\n    return resNodes;\n  }\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object | Function} rule\n   * @param  {Object} context -- information about assumed properties of operators\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n\n\n  function applyRule(node, rule, context) {\n    //    console.log('Entering applyRule(\"', rule.l.toString({parenthesis:'all'}), '->', rule.r.toString({parenthesis:'all'}), '\",', node.toString({parenthesis:'all'}),')')\n    // check that the assumptions for this rule are satisfied by the current\n    // context:\n    if (rule.assuming) {\n      for (var symbol in rule.assuming) {\n        for (var property in rule.assuming[symbol]) {\n          if (hasProperty(symbol, property, context) !== rule.assuming[symbol][property]) {\n            return node;\n          }\n        }\n      }\n    }\n\n    var mergedContext = mergeContext(rule.imposeContext, context); // Do not clone node unless we find a match\n\n    var res = node; // First replace our child nodes with their simplified versions\n    // If a child could not be simplified, applying the rule to it\n    // will have no effect since the node is returned unchanged\n\n    if (res instanceof OperatorNode || res instanceof FunctionNode) {\n      var newArgs = mapRule(res.args, rule, context);\n\n      if (newArgs !== res.args) {\n        res = res.clone();\n        res.args = newArgs;\n      }\n    } else if (res instanceof ParenthesisNode) {\n      if (res.content) {\n        var newContent = applyRule(res.content, rule, context);\n\n        if (newContent !== res.content) {\n          res = new ParenthesisNode(newContent);\n        }\n      }\n    } else if (res instanceof ArrayNode) {\n      var newItems = mapRule(res.items, rule, context);\n\n      if (newItems !== res.items) {\n        res = new ArrayNode(newItems);\n      }\n    } else if (res instanceof AccessorNode) {\n      var newObj = res.object;\n\n      if (res.object) {\n        newObj = applyRule(res.object, rule, context);\n      }\n\n      var newIndex = res.index;\n\n      if (res.index) {\n        newIndex = applyRule(res.index, rule, context);\n      }\n\n      if (newObj !== res.object || newIndex !== res.index) {\n        res = new AccessorNode(newObj, newIndex);\n      }\n    } else if (res instanceof IndexNode) {\n      var newDims = mapRule(res.dimensions, rule, context);\n\n      if (newDims !== res.dimensions) {\n        res = new IndexNode(newDims);\n      }\n    } else if (res instanceof ObjectNode) {\n      var changed = false;\n      var newProps = {};\n\n      for (var prop in res.properties) {\n        newProps[prop] = applyRule(res.properties[prop], rule, context);\n\n        if (newProps[prop] !== res.properties[prop]) {\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        res = new ObjectNode(newProps);\n      }\n    } // Try to match a rule against this node\n\n\n    var repl = rule.r;\n\n    var matches = _ruleMatch(rule.l, res, mergedContext)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.\n    // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n\n\n    if (!matches && rule.expanded) {\n      repl = rule.expanded.r;\n      matches = _ruleMatch(rule.expanded.l, res, mergedContext)[0];\n    }\n\n    if (matches) {\n      // const before = res.toString({parenthesis: 'all'})\n      // Create a new node by cloning the rhs of the matched rule\n      // we keep any implicit multiplication state if relevant\n      var implicit = res.implicit;\n      res = repl.clone();\n\n      if (implicit && 'implicit' in repl) {\n        res.implicit = true;\n      } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n\n\n      res = res.transform(function (node) {\n        if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n          return matches.placeholders[node.name].clone();\n        } else {\n          return node;\n        }\n      }); // const after = res.toString({parenthesis: 'all'})\n      // console.log('Simplified ' + before + ' to ' + after)\n    }\n\n    if (rule.repeat && res !== node) {\n      res = applyRule(res, rule, context);\n    }\n\n    return res;\n  }\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n\n\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      // Keep order, but try all parenthesizations\n      for (var _i = 1; _i < node.args.length; _i++) {\n        var left = node.args[0];\n\n        if (_i > 1) {\n          left = makeNode(node.args.slice(0, _i));\n        }\n\n        rightArgs = node.args.slice(_i);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([left, right]));\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n\n\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    }; // Some matches may not have placeholders; this is OK\n\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    } // Placeholders with the same key must match exactly\n\n\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n\n\n  function combineChildMatches(list1, list2) {\n    var res = [];\n\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n\n    var merged;\n\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n\n\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n\n    return uniqueSets;\n  }\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param {Object} context -- provides assumed properties of operators\n   * @param {Boolean} isSplit -- whether we are in process of splitting an\n   *                    n-ary operator node into possible binary combinations.\n   *                    Defaults to false.\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _ruleMatch(rule, node, context, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n    //    console.log('Entering _ruleMatch(', rule.toString({parenthesis:'all'}), ', ', node.toString({parenthesis:'all'}), ', ', context, ')')\n    var res = [{\n      placeholders: {}\n    }];\n\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } // rule and node match. Search the children of rule and node.\n\n\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node, context) && node.args.length === rule.args.length || isSplit) {\n        // Expect non-associative operators to match exactly,\n        // except in any order if operator is commutative\n        var childMatches = [];\n\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i], context);\n\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            break;\n          } // The child matched, so add the information returned from the child to our result\n\n\n          childMatches.push(childMatch);\n        }\n\n        if (childMatches.length !== rule.args.length) {\n          if (!isCommutative(node, context) || // exact match in order needed\n          rule.args.length === 1) {\n            // nothing to commute\n            return [];\n          }\n\n          if (rule.args.length > 2) {\n            /* Need to generate all permutations and try them.\n             * It's a bit complicated, and unlikely to come up since there\n             * are very few ternary or higher operators. So punt for now.\n             */\n            throw new Error('permuting >2 commutative non-associative rule arguments not yet implemented');\n          }\n          /* Exactly two arguments, try them reversed */\n\n\n          var leftMatch = _ruleMatch(rule.args[0], node.args[1], context);\n\n          if (leftMatch.length === 0) {\n            return [];\n          }\n\n          var rightMatch = _ruleMatch(rule.args[1], node.args[0], context);\n\n          if (rightMatch.length === 0) {\n            return [];\n          }\n\n          childMatches = [leftMatch, rightMatch];\n        }\n\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, context);\n        var splitMatches = [];\n\n        for (var _i2 = 0; _i2 < splits.length; _i2++) {\n          var matchSet = _ruleMatch(rule, splits[_i2], context, true); // recursing at the same tree depth here\n\n\n          splitMatches = splitMatches.concat(matchSet);\n        }\n\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      } else if (rule.name[0] === 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if (!isConstantNode(node)) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      } else if (rule.name[0] === 'c') {\n        // rule matches any ConstantNode\n        if (node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      } else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    } // It's a match!\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n\n\n    return res;\n  }\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  return simplify;\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}