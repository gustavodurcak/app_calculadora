{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { complexEquals } from '../../utils/complex.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nexport var createEqualScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config\n  } = _ref;\n  var compareUnits = createCompareUnits({\n    typed\n  });\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return complexEquals(x, y, config.epsilon);\n    }\n  }, compareUnits);\n});\nexport var createEqualScalarNumber = factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","map":{"version":3,"names":["nearlyEqual","bigNearlyEqual","factory","complexEquals","createCompareUnits","name","dependencies","createEqualScalar","_ref","typed","config","compareUnits","booleanBoolean","x","y","numberNumber","epsilon","BigNumberBigNumber","eq","FractionFraction","equals","ComplexComplex","createEqualScalarNumber","_ref2"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/function/relational/equalScalar.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { complexEquals } from '../../utils/complex.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nexport var createEqualScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config\n  } = _ref;\n  var compareUnits = createCompareUnits({\n    typed\n  });\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return complexEquals(x, y, config.epsilon);\n    }\n  }, compareUnits);\n});\nexport var createEqualScalarNumber = factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,WAAW,IAAIC,cAAxB,QAA8C,sCAA9C;AACA,SAASD,WAAT,QAA4B,uBAA5B;AACA,SAASE,OAAT,QAAwB,wBAAxB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;EAChF,IAAI;IACFC,KADE;IAEFC;EAFE,IAGAF,IAHJ;EAIA,IAAIG,YAAY,GAAGP,kBAAkB,CAAC;IACpCK;EADoC,CAAD,CAArC;EAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOA,KAAK,CAACJ,IAAD,EAAO;IACjB,oBAAoB,SAASO,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;MAChD,OAAOD,CAAC,KAAKC,CAAb;IACD,CAHgB;IAIjB,kBAAkB,SAASC,YAAT,CAAsBF,CAAtB,EAAyBC,CAAzB,EAA4B;MAC5C,OAAOd,WAAW,CAACa,CAAD,EAAIC,CAAJ,EAAOJ,MAAM,CAACM,OAAd,CAAlB;IACD,CANgB;IAOjB,wBAAwB,SAASC,kBAAT,CAA4BJ,CAA5B,EAA+BC,CAA/B,EAAkC;MACxD,OAAOD,CAAC,CAACK,EAAF,CAAKJ,CAAL,KAAWb,cAAc,CAACY,CAAD,EAAIC,CAAJ,EAAOJ,MAAM,CAACM,OAAd,CAAhC;IACD,CATgB;IAUjB,sBAAsB,SAASG,gBAAT,CAA0BN,CAA1B,EAA6BC,CAA7B,EAAgC;MACpD,OAAOD,CAAC,CAACO,MAAF,CAASN,CAAT,CAAP;IACD,CAZgB;IAajB,oBAAoB,SAASO,cAAT,CAAwBR,CAAxB,EAA2BC,CAA3B,EAA8B;MAChD,OAAOX,aAAa,CAACU,CAAD,EAAIC,CAAJ,EAAOJ,MAAM,CAACM,OAAd,CAApB;IACD;EAfgB,CAAP,EAgBTL,YAhBS,CAAZ;AAiBD,CAlCoD,CAA9C;AAmCP,OAAO,IAAIW,uBAAuB,GAAGpB,OAAO,CAACG,IAAD,EAAO,CAAC,OAAD,EAAU,QAAV,CAAP,EAA4BkB,KAAK,IAAI;EAC/E,IAAI;IACFd,KADE;IAEFC;EAFE,IAGAa,KAHJ;EAIA,OAAOd,KAAK,CAACJ,IAAD,EAAO;IACjB,kBAAkB,SAASU,YAAT,CAAsBF,CAAtB,EAAyBC,CAAzB,EAA4B;MAC5C,OAAOd,WAAW,CAACa,CAAD,EAAIC,CAAJ,EAAOJ,MAAM,CAACM,OAAd,CAAlB;IACD;EAHgB,CAAP,CAAZ;AAKD,CAV2C,CAArC"},"metadata":{},"sourceType":"module"}