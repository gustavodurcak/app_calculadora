{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'sin';\nvar dependencies = ['typed'];\nexport var createSin = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n  /**\n   * Calculate the sine of a value.\n   *\n   * To avoid confusion with the matrix sine, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sin(x)\n   *\n   * Examples:\n   *\n   *    math.sin(2)                      // returns number 0.9092974268256813\n   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475\n   *    math.sin(math.unit(90, 'deg'))   // returns number 1\n   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Sine of x\n   */\n\n  return typed(name, {\n    number: Math.sin,\n    'Complex | BigNumber': x => x.sin()\n  }, trigUnit);\n});","map":{"version":3,"names":["factory","createTrigUnit","name","dependencies","createSin","_ref","typed","trigUnit","number","Math","sin","x"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/function/trigonometry/sin.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'sin';\nvar dependencies = ['typed'];\nexport var createSin = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n  /**\n   * Calculate the sine of a value.\n   *\n   * To avoid confusion with the matrix sine, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sin(x)\n   *\n   * Examples:\n   *\n   *    math.sin(2)                      // returns number 0.9092974268256813\n   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475\n   *    math.sin(math.unit(90, 'deg'))   // returns number 1\n   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Sine of x\n   */\n\n  return typed(name, {\n    number: Math.sin,\n    'Complex | BigNumber': x => x.sin()\n  }, trigUnit);\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;EACxE,IAAI;IACFC;EADE,IAEAD,IAFJ;EAGA,IAAIE,QAAQ,GAAGN,cAAc,CAAC;IAC5BK;EAD4B,CAAD,CAA7B;EAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOA,KAAK,CAACJ,IAAD,EAAO;IACjBM,MAAM,EAAEC,IAAI,CAACC,GADI;IAEjB,uBAAuBC,CAAC,IAAIA,CAAC,CAACD,GAAF;EAFX,CAAP,EAGTH,QAHS,CAAZ;AAID,CAvC4C,CAAtC"},"metadata":{},"sourceType":"module"}