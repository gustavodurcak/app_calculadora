{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { keywords } from '../keywords.js';\nimport { escape } from '../../utils/string.js';\nimport { forEach, join } from '../../utils/array.js';\nimport { toSymbol } from '../../utils/latex.js';\nimport { getPrecedence } from '../operators.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'FunctionAssignmentNode';\nvar dependencies = ['typed', 'Node'];\nexport var createFunctionAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Node\n  } = _ref;\n  /**\n   * Is parenthesis needed?\n   * @param {Node} node\n   * @param {Object} parenthesis\n   * @param {string} implicit\n   * @private\n   */\n\n  function needParenthesis(node, parenthesis, implicit) {\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.expr, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n\n  class FunctionAssignmentNode extends Node {\n    /**\n     * @constructor FunctionAssignmentNode\n     * @extends {Node}\n     * Function assignment\n     *\n     * @param {string} name           Function name\n     * @param {string[] | Array.<{name: string, type: string}>} params\n     *                                Array with function parameter names, or an\n     *                                array with objects containing the name\n     *                                and type of the parameter\n     * @param {Node} expr             The function expression\n     */\n    constructor(name, params, expr) {\n      super(); // validate input\n\n      if (typeof name !== 'string') {\n        throw new TypeError('String expected for parameter \"name\"');\n      }\n\n      if (!Array.isArray(params)) {\n        throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n      }\n\n      if (!isNode(expr)) {\n        throw new TypeError('Node expected for parameter \"expr\"');\n      }\n\n      if (keywords.has(name)) {\n        throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n      }\n\n      this.name = name;\n      this.params = params.map(function (param) {\n        return param && param.name || param;\n      });\n      this.types = params.map(function (param) {\n        return param && param.type || 'any';\n      });\n      this.expr = expr;\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isFunctionAssignmentNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var childArgNames = Object.create(argNames);\n      forEach(this.params, function (param) {\n        childArgNames[param] = true;\n      }); // compile the function expression with the child args\n\n      var evalExpr = this.expr._compile(math, childArgNames);\n\n      var name = this.name;\n      var params = this.params;\n      var signature = join(this.types, ',');\n      var syntax = name + '(' + join(this.params, ', ') + ')';\n      return function evalFunctionAssignmentNode(scope, args, context) {\n        var signatures = {};\n\n        signatures[signature] = function () {\n          var childArgs = Object.create(args);\n\n          for (var i = 0; i < params.length; i++) {\n            childArgs[params[i]] = arguments[i];\n          }\n\n          return evalExpr(scope, childArgs, context);\n        };\n\n        var fn = typed(name, signatures);\n        fn.syntax = syntax;\n        scope.set(name, fn);\n        return fn;\n      };\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      callback(this.expr, 'expr', this);\n    }\n    /**\n     * Create a new FunctionAssignmentNode whose children are the results of\n     * calling the provided callback function for each child of the original\n     * node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var expr = this._ifNode(callback(this.expr, 'expr', this));\n\n      return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionAssignmentNode}\n     */\n\n\n    clone() {\n      return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n    }\n    /**\n     * get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var expr = this.expr.toString(options);\n\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = '(' + expr + ')';\n      }\n\n      return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      var types = this.types;\n      return {\n        mathjs: name,\n        name: this.name,\n        params: this.params.map(function (param, index) {\n          return {\n            name: param,\n            type: types[index]\n          };\n        }),\n        expr: this.expr\n      };\n    }\n    /**\n     * Instantiate an FunctionAssignmentNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     ```\n     *     {\"mathjs\": \"FunctionAssignmentNode\",\n     *      name: ..., params: ..., expr: ...}\n     *     ```\n     *     where mathjs is optional\n     * @returns {FunctionAssignmentNode}\n     */\n\n\n    static fromJSON(json) {\n      return new FunctionAssignmentNode(json.name, json.params, json.expr);\n    }\n    /**\n     * get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var params = [];\n\n      for (var i = 0; i < this.params.length; i++) {\n        params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\n      }\n\n      var expr = this.expr.toHTML(options);\n\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n    }\n    /**\n     * get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var expr = this.expr.toTex(options);\n\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = \"\\\\left(\".concat(expr, \"\\\\right)\");\n      }\n\n      return '\\\\mathrm{' + this.name + '}\\\\left(' + this.params.map(toSymbol).join(',') + '\\\\right):=' + expr;\n    }\n\n  }\n\n  _defineProperty(FunctionAssignmentNode, \"name\", name);\n\n  return FunctionAssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isNode","keywords","escape","forEach","join","toSymbol","getPrecedence","factory","name","dependencies","createFunctionAssignmentNode","_ref","typed","Node","needParenthesis","node","parenthesis","implicit","precedence","exprPrecedence","expr","FunctionAssignmentNode","constructor","params","TypeError","Array","isArray","has","Error","map","param","types","type","isFunctionAssignmentNode","_compile","math","argNames","childArgNames","Object","create","evalExpr","signature","syntax","evalFunctionAssignmentNode","scope","args","context","signatures","childArgs","i","length","arguments","fn","set","callback","_ifNode","slice","clone","_toString","options","toString","toJSON","mathjs","index","fromJSON","json","toHTML","push","_toTex","toTex","concat","isClass"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/expression/node/FunctionAssignmentNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { keywords } from '../keywords.js';\nimport { escape } from '../../utils/string.js';\nimport { forEach, join } from '../../utils/array.js';\nimport { toSymbol } from '../../utils/latex.js';\nimport { getPrecedence } from '../operators.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'FunctionAssignmentNode';\nvar dependencies = ['typed', 'Node'];\nexport var createFunctionAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Node\n  } = _ref;\n\n  /**\n   * Is parenthesis needed?\n   * @param {Node} node\n   * @param {Object} parenthesis\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.expr, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n\n  class FunctionAssignmentNode extends Node {\n    /**\n     * @constructor FunctionAssignmentNode\n     * @extends {Node}\n     * Function assignment\n     *\n     * @param {string} name           Function name\n     * @param {string[] | Array.<{name: string, type: string}>} params\n     *                                Array with function parameter names, or an\n     *                                array with objects containing the name\n     *                                and type of the parameter\n     * @param {Node} expr             The function expression\n     */\n    constructor(name, params, expr) {\n      super(); // validate input\n\n      if (typeof name !== 'string') {\n        throw new TypeError('String expected for parameter \"name\"');\n      }\n\n      if (!Array.isArray(params)) {\n        throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n      }\n\n      if (!isNode(expr)) {\n        throw new TypeError('Node expected for parameter \"expr\"');\n      }\n\n      if (keywords.has(name)) {\n        throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n      }\n\n      this.name = name;\n      this.params = params.map(function (param) {\n        return param && param.name || param;\n      });\n      this.types = params.map(function (param) {\n        return param && param.type || 'any';\n      });\n      this.expr = expr;\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isFunctionAssignmentNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var childArgNames = Object.create(argNames);\n      forEach(this.params, function (param) {\n        childArgNames[param] = true;\n      }); // compile the function expression with the child args\n\n      var evalExpr = this.expr._compile(math, childArgNames);\n\n      var name = this.name;\n      var params = this.params;\n      var signature = join(this.types, ',');\n      var syntax = name + '(' + join(this.params, ', ') + ')';\n      return function evalFunctionAssignmentNode(scope, args, context) {\n        var signatures = {};\n\n        signatures[signature] = function () {\n          var childArgs = Object.create(args);\n\n          for (var i = 0; i < params.length; i++) {\n            childArgs[params[i]] = arguments[i];\n          }\n\n          return evalExpr(scope, childArgs, context);\n        };\n\n        var fn = typed(name, signatures);\n        fn.syntax = syntax;\n        scope.set(name, fn);\n        return fn;\n      };\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      callback(this.expr, 'expr', this);\n    }\n    /**\n     * Create a new FunctionAssignmentNode whose children are the results of\n     * calling the provided callback function for each child of the original\n     * node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var expr = this._ifNode(callback(this.expr, 'expr', this));\n\n      return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionAssignmentNode}\n     */\n\n\n    clone() {\n      return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n    }\n    /**\n     * get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var expr = this.expr.toString(options);\n\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = '(' + expr + ')';\n      }\n\n      return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      var types = this.types;\n      return {\n        mathjs: name,\n        name: this.name,\n        params: this.params.map(function (param, index) {\n          return {\n            name: param,\n            type: types[index]\n          };\n        }),\n        expr: this.expr\n      };\n    }\n    /**\n     * Instantiate an FunctionAssignmentNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     ```\n     *     {\"mathjs\": \"FunctionAssignmentNode\",\n     *      name: ..., params: ..., expr: ...}\n     *     ```\n     *     where mathjs is optional\n     * @returns {FunctionAssignmentNode}\n     */\n\n\n    static fromJSON(json) {\n      return new FunctionAssignmentNode(json.name, json.params, json.expr);\n    }\n    /**\n     * get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var params = [];\n\n      for (var i = 0; i < this.params.length; i++) {\n        params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\n      }\n\n      var expr = this.expr.toHTML(options);\n\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n    }\n    /**\n     * get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var expr = this.expr.toTex(options);\n\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = \"\\\\left(\".concat(expr, \"\\\\right)\");\n      }\n\n      return '\\\\mathrm{' + this.name + '}\\\\left(' + this.params.map(toSymbol).join(',') + '\\\\right):=' + expr;\n    }\n\n  }\n\n  _defineProperty(FunctionAssignmentNode, \"name\", name);\n\n  return FunctionAssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}