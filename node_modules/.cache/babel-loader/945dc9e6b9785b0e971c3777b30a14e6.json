{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { extend } from '../../../utils/object.js';\nimport { createMatAlgo13xDD } from './matAlgo13xDD.js';\nimport { createMatAlgo14xDs } from './matAlgo14xDs.js';\nvar name = 'matrixAlgorithmSuite';\nvar dependencies = ['typed', 'matrix'];\nexport var createMatrixAlgorithmSuite = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var matAlgo13xDD = createMatAlgo13xDD({\n    typed\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  /**\n   * Return a signatures object with the usual boilerplate of\n   * matrix algorithms, based on a plain options object with the\n   * following properties:\n   *   elop: function -- the elementwise operation to use, defaults to self\n   *   SS: function -- the algorithm to apply for two sparse matrices\n   *   DS: function -- the algorithm to apply for a dense and a sparse matrix\n   *   SD: function -- algo for a sparse and a dense; defaults to SD flipped\n   *   Ss: function -- the algorithm to apply for a sparse matrix and scalar\n   *   sS: function -- algo for scalar and sparse; defaults to Ss flipped\n   *   scalar: string -- typed-function type for scalars, defaults to 'any'\n   *\n   * If Ss is not specified, no matrix-scalar signatures are generated.\n   *\n   * @param {object} options\n   * @return {Object<string, function>} signatures\n   */\n\n  return function matrixAlgorithmSuite(options) {\n    var elop = options.elop;\n    var SD = options.SD || options.DS;\n    var matrixSignatures;\n\n    if (elop) {\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': (x, y) => matAlgo13xDD(x, y, elop),\n        'Array, Array': (x, y) => matAlgo13xDD(matrix(x), matrix(y), elop).valueOf(),\n        'Array, DenseMatrix': (x, y) => matAlgo13xDD(matrix(x), y, elop),\n        'DenseMatrix, Array': (x, y) => matAlgo13xDD(x, matrix(y), elop)\n      }; // Now incorporate sparse matrices\n\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = (x, y) => options.SS(x, y, elop, false);\n      }\n\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = (x, y) => options.DS(x, y, elop, false);\n\n        matrixSignatures['Array, SparseMatrix'] = (x, y) => options.DS(matrix(x), y, elop, false);\n      }\n\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = (x, y) => SD(y, x, elop, true);\n\n        matrixSignatures['SparseMatrix, Array'] = (x, y) => SD(matrix(y), x, elop, true);\n      }\n    } else {\n      // No elop, use this\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(x, y, self);\n        }),\n        'Array, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(matrix(x), matrix(y), self).valueOf();\n        }),\n        'Array, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(matrix(x), y, self);\n        }),\n        'DenseMatrix, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(x, matrix(y), self);\n        })\n      }; // Now incorporate sparse matrices\n\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.SS(x, y, self, false);\n        });\n      }\n\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(x, y, self, false);\n        });\n        matrixSignatures['Array, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(matrix(x), y, self, false);\n        });\n      }\n\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return SD(y, x, self, true);\n        });\n        matrixSignatures['SparseMatrix, Array'] = typed.referToSelf(self => (x, y) => {\n          return SD(matrix(y), x, self, true);\n        });\n      }\n    } // Now add the scalars\n\n\n    var scalar = options.scalar || 'any';\n    var Ds = options.Ds || options.Ss;\n\n    if (Ds) {\n      if (elop) {\n        matrixSignatures['DenseMatrix,' + scalar] = (x, y) => matAlgo14xDs(x, y, elop, false);\n\n        matrixSignatures[scalar + ', DenseMatrix'] = (x, y) => matAlgo14xDs(y, x, elop, true);\n\n        matrixSignatures['Array,' + scalar] = (x, y) => matAlgo14xDs(matrix(x), y, elop, false).valueOf();\n\n        matrixSignatures[scalar + ', Array'] = (x, y) => matAlgo14xDs(matrix(y), x, elop, true).valueOf();\n      } else {\n        matrixSignatures['DenseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(x, y, self, false);\n        });\n        matrixSignatures[scalar + ', DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(y, x, self, true);\n        });\n        matrixSignatures['Array,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n        });\n        matrixSignatures[scalar + ', Array'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n        });\n      }\n    }\n\n    var sS = options.sS !== undefined ? options.sS : options.Ss;\n\n    if (elop) {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = (x, y) => options.Ss(x, y, elop, false);\n      }\n\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = (x, y) => sS(y, x, elop, true);\n      }\n    } else {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return options.Ss(x, y, self, false);\n        });\n      }\n\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return sS(y, x, self, true);\n        });\n      }\n    } // Also pull in the scalar signatures if the operator is a typed function\n\n\n    if (elop && elop.signatures) {\n      extend(matrixSignatures, elop.signatures);\n    }\n\n    return matrixSignatures;\n  };\n});","map":{"version":3,"names":["factory","extend","createMatAlgo13xDD","createMatAlgo14xDs","name","dependencies","createMatrixAlgorithmSuite","_ref","typed","matrix","matAlgo13xDD","matAlgo14xDs","matrixAlgorithmSuite","options","elop","SD","DS","matrixSignatures","x","y","valueOf","SS","referToSelf","self","scalar","Ds","Ss","sS","undefined","signatures"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { extend } from '../../../utils/object.js';\nimport { createMatAlgo13xDD } from './matAlgo13xDD.js';\nimport { createMatAlgo14xDs } from './matAlgo14xDs.js';\nvar name = 'matrixAlgorithmSuite';\nvar dependencies = ['typed', 'matrix'];\nexport var createMatrixAlgorithmSuite = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var matAlgo13xDD = createMatAlgo13xDD({\n    typed\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  /**\n   * Return a signatures object with the usual boilerplate of\n   * matrix algorithms, based on a plain options object with the\n   * following properties:\n   *   elop: function -- the elementwise operation to use, defaults to self\n   *   SS: function -- the algorithm to apply for two sparse matrices\n   *   DS: function -- the algorithm to apply for a dense and a sparse matrix\n   *   SD: function -- algo for a sparse and a dense; defaults to SD flipped\n   *   Ss: function -- the algorithm to apply for a sparse matrix and scalar\n   *   sS: function -- algo for scalar and sparse; defaults to Ss flipped\n   *   scalar: string -- typed-function type for scalars, defaults to 'any'\n   *\n   * If Ss is not specified, no matrix-scalar signatures are generated.\n   *\n   * @param {object} options\n   * @return {Object<string, function>} signatures\n   */\n\n  return function matrixAlgorithmSuite(options) {\n    var elop = options.elop;\n    var SD = options.SD || options.DS;\n    var matrixSignatures;\n\n    if (elop) {\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': (x, y) => matAlgo13xDD(x, y, elop),\n        'Array, Array': (x, y) => matAlgo13xDD(matrix(x), matrix(y), elop).valueOf(),\n        'Array, DenseMatrix': (x, y) => matAlgo13xDD(matrix(x), y, elop),\n        'DenseMatrix, Array': (x, y) => matAlgo13xDD(x, matrix(y), elop)\n      }; // Now incorporate sparse matrices\n\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = (x, y) => options.SS(x, y, elop, false);\n      }\n\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = (x, y) => options.DS(x, y, elop, false);\n\n        matrixSignatures['Array, SparseMatrix'] = (x, y) => options.DS(matrix(x), y, elop, false);\n      }\n\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = (x, y) => SD(y, x, elop, true);\n\n        matrixSignatures['SparseMatrix, Array'] = (x, y) => SD(matrix(y), x, elop, true);\n      }\n    } else {\n      // No elop, use this\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(x, y, self);\n        }),\n        'Array, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(matrix(x), matrix(y), self).valueOf();\n        }),\n        'Array, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(matrix(x), y, self);\n        }),\n        'DenseMatrix, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(x, matrix(y), self);\n        })\n      }; // Now incorporate sparse matrices\n\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.SS(x, y, self, false);\n        });\n      }\n\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(x, y, self, false);\n        });\n        matrixSignatures['Array, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(matrix(x), y, self, false);\n        });\n      }\n\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return SD(y, x, self, true);\n        });\n        matrixSignatures['SparseMatrix, Array'] = typed.referToSelf(self => (x, y) => {\n          return SD(matrix(y), x, self, true);\n        });\n      }\n    } // Now add the scalars\n\n\n    var scalar = options.scalar || 'any';\n    var Ds = options.Ds || options.Ss;\n\n    if (Ds) {\n      if (elop) {\n        matrixSignatures['DenseMatrix,' + scalar] = (x, y) => matAlgo14xDs(x, y, elop, false);\n\n        matrixSignatures[scalar + ', DenseMatrix'] = (x, y) => matAlgo14xDs(y, x, elop, true);\n\n        matrixSignatures['Array,' + scalar] = (x, y) => matAlgo14xDs(matrix(x), y, elop, false).valueOf();\n\n        matrixSignatures[scalar + ', Array'] = (x, y) => matAlgo14xDs(matrix(y), x, elop, true).valueOf();\n      } else {\n        matrixSignatures['DenseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(x, y, self, false);\n        });\n        matrixSignatures[scalar + ', DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(y, x, self, true);\n        });\n        matrixSignatures['Array,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n        });\n        matrixSignatures[scalar + ', Array'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n        });\n      }\n    }\n\n    var sS = options.sS !== undefined ? options.sS : options.Ss;\n\n    if (elop) {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = (x, y) => options.Ss(x, y, elop, false);\n      }\n\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = (x, y) => sS(y, x, elop, true);\n      }\n    } else {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return options.Ss(x, y, self, false);\n        });\n      }\n\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return sS(y, x, self, true);\n        });\n      }\n    } // Also pull in the scalar signatures if the operator is a typed function\n\n\n    if (elop && elop.signatures) {\n      extend(matrixSignatures, elop.signatures);\n    }\n\n    return matrixSignatures;\n  };\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}