{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nexport var createCompareUnits = /* #__PURE__ */factory('compareUnits', ['typed'], _ref => {\n  var {\n    typed\n  } = _ref;\n  return {\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return typed.find(self, [x.valueType(), y.valueType()])(x.value, y.value);\n    })\n  };\n});","map":{"version":3,"names":["factory","createCompareUnits","_ref","typed","referToSelf","self","x","y","equalBase","Error","find","valueType","value"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/function/relational/compareUnits.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nexport var createCompareUnits = /* #__PURE__ */factory('compareUnits', ['typed'], _ref => {\n  var {\n    typed\n  } = _ref;\n  return {\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return typed.find(self, [x.valueType(), y.valueType()])(x.value, y.value);\n    })\n  };\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,OAAO,IAAIC,kBAAkB,GAAG,eAAeD,OAAO,CAAC,cAAD,EAAiB,CAAC,OAAD,CAAjB,EAA4BE,IAAI,IAAI;EACxF,IAAI;IACFC;EADE,IAEAD,IAFJ;EAGA,OAAO;IACL,cAAcC,KAAK,CAACC,WAAN,CAAkBC,IAAI,IAAI,CAACC,CAAD,EAAIC,CAAJ,KAAU;MAChD,IAAI,CAACD,CAAC,CAACE,SAAF,CAAYD,CAAZ,CAAL,EAAqB;QACnB,MAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;MACD;;MAED,OAAON,KAAK,CAACO,IAAN,CAAWL,IAAX,EAAiB,CAACC,CAAC,CAACK,SAAF,EAAD,EAAgBJ,CAAC,CAACI,SAAF,EAAhB,CAAjB,EAAiDL,CAAC,CAACM,KAAnD,EAA0DL,CAAC,CAACK,KAA5D,CAAP;IACD,CANa;EADT,CAAP;AASD,CAbqD,CAA/C"},"metadata":{},"sourceType":"module"}