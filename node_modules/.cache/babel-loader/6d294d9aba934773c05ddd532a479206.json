{"ast":null,"code":"import { escape } from '../../utils/string.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { toSymbol } from '../../utils/latex.js';\nvar name = 'SymbolNode';\nvar dependencies = ['math', '?Unit', 'Node'];\nexport var createSymbolNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Unit,\n    Node\n  } = _ref;\n  /**\n   * Check whether some name is a valueless unit like \"inch\".\n   * @param {string} name\n   * @return {boolean}\n   */\n\n  function isValuelessUnit(name) {\n    return Unit ? Unit.isValuelessUnit(name) : false;\n  }\n\n  class SymbolNode extends Node {\n    /**\n     * @constructor SymbolNode\n     * @extends {Node}\n     * A symbol node can hold and resolve a symbol\n     * @param {string} name\n     * @extends {Node}\n     */\n    constructor(name) {\n      super(); // validate input\n\n      if (typeof name !== 'string') {\n        throw new TypeError('String expected for parameter \"name\"');\n      }\n\n      this.name = name;\n    }\n\n    get type() {\n      return 'SymbolNode';\n    }\n\n    get isSymbolNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var name = this.name;\n\n      if (argNames[name] === true) {\n        // this is a FunctionAssignment argument\n        // (like an x when inside the expression of a function\n        // assignment `f(x) = ...`)\n        return function (scope, args, context) {\n          return args[name];\n        };\n      } else if (name in math) {\n        return function (scope, args, context) {\n          return scope.has(name) ? scope.get(name) : getSafeProperty(math, name);\n        };\n      } else {\n        var isUnit = isValuelessUnit(name);\n        return function (scope, args, context) {\n          return scope.has(name) ? scope.get(name) : isUnit ? new Unit(null, name) : SymbolNode.onUndefinedSymbol(name);\n        };\n      }\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {// nothing to do, we don't have any children\n    }\n    /**\n     * Create a new SymbolNode with children produced by the given callback.\n     * Trivial since a SymbolNode has no children\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\n     * @returns {SymbolNode} Returns a clone of the node\n     */\n\n\n    map(callback) {\n      return this.clone();\n    }\n    /**\n     * Throws an error 'Undefined symbol {name}'\n     * @param {string} name\n     */\n\n\n    static onUndefinedSymbol(name) {\n      throw new Error('Undefined symbol ' + name);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {SymbolNode}\n     */\n\n\n    clone() {\n      return new SymbolNode(this.name);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toString(options) {\n      return this.name;\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    toHTML(options) {\n      var name = escape(this.name);\n\n      if (name === 'true' || name === 'false') {\n        return '<span class=\"math-symbol math-boolean\">' + name + '</span>';\n      } else if (name === 'i') {\n        return '<span class=\"math-symbol math-imaginary-symbol\">' + name + '</span>';\n      } else if (name === 'Infinity') {\n        return '<span class=\"math-symbol math-infinity-symbol\">' + name + '</span>';\n      } else if (name === 'NaN') {\n        return '<span class=\"math-symbol math-nan-symbol\">' + name + '</span>';\n      } else if (name === 'null') {\n        return '<span class=\"math-symbol math-null-symbol\">' + name + '</span>';\n      } else if (name === 'undefined') {\n        return '<span class=\"math-symbol math-undefined-symbol\">' + name + '</span>';\n      }\n\n      return '<span class=\"math-symbol\">' + name + '</span>';\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: 'SymbolNode',\n        name: this.name\n      };\n    }\n    /**\n     * Instantiate a SymbolNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"SymbolNode\", name: \"x\"}`,\n     *                       where mathjs is optional\n     * @returns {SymbolNode}\n     */\n\n\n    static fromJSON(json) {\n      return new SymbolNode(json.name);\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toTex(options) {\n      var isUnit = false;\n\n      if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {\n        isUnit = true;\n      }\n\n      var symbol = toSymbol(this.name, isUnit);\n\n      if (symbol[0] === '\\\\') {\n        // no space needed if the symbol starts with '\\'\n        return symbol;\n      } // the space prevents symbols from breaking stuff like '\\cdot'\n      // if it's written right before the symbol\n\n\n      return ' ' + symbol;\n    }\n\n  }\n\n  return SymbolNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["escape","getSafeProperty","factory","toSymbol","name","dependencies","createSymbolNode","_ref","math","Unit","Node","isValuelessUnit","SymbolNode","constructor","TypeError","type","isSymbolNode","_compile","argNames","scope","args","context","has","get","isUnit","onUndefinedSymbol","forEach","callback","map","clone","Error","_toString","options","toHTML","toJSON","mathjs","fromJSON","json","_toTex","symbol","isClass","isNode"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/expression/node/SymbolNode.js"],"sourcesContent":["import { escape } from '../../utils/string.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { toSymbol } from '../../utils/latex.js';\nvar name = 'SymbolNode';\nvar dependencies = ['math', '?Unit', 'Node'];\nexport var createSymbolNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Unit,\n    Node\n  } = _ref;\n\n  /**\n   * Check whether some name is a valueless unit like \"inch\".\n   * @param {string} name\n   * @return {boolean}\n   */\n  function isValuelessUnit(name) {\n    return Unit ? Unit.isValuelessUnit(name) : false;\n  }\n\n  class SymbolNode extends Node {\n    /**\n     * @constructor SymbolNode\n     * @extends {Node}\n     * A symbol node can hold and resolve a symbol\n     * @param {string} name\n     * @extends {Node}\n     */\n    constructor(name) {\n      super(); // validate input\n\n      if (typeof name !== 'string') {\n        throw new TypeError('String expected for parameter \"name\"');\n      }\n\n      this.name = name;\n    }\n\n    get type() {\n      return 'SymbolNode';\n    }\n\n    get isSymbolNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var name = this.name;\n\n      if (argNames[name] === true) {\n        // this is a FunctionAssignment argument\n        // (like an x when inside the expression of a function\n        // assignment `f(x) = ...`)\n        return function (scope, args, context) {\n          return args[name];\n        };\n      } else if (name in math) {\n        return function (scope, args, context) {\n          return scope.has(name) ? scope.get(name) : getSafeProperty(math, name);\n        };\n      } else {\n        var isUnit = isValuelessUnit(name);\n        return function (scope, args, context) {\n          return scope.has(name) ? scope.get(name) : isUnit ? new Unit(null, name) : SymbolNode.onUndefinedSymbol(name);\n        };\n      }\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {// nothing to do, we don't have any children\n    }\n    /**\n     * Create a new SymbolNode with children produced by the given callback.\n     * Trivial since a SymbolNode has no children\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\n     * @returns {SymbolNode} Returns a clone of the node\n     */\n\n\n    map(callback) {\n      return this.clone();\n    }\n    /**\n     * Throws an error 'Undefined symbol {name}'\n     * @param {string} name\n     */\n\n\n    static onUndefinedSymbol(name) {\n      throw new Error('Undefined symbol ' + name);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {SymbolNode}\n     */\n\n\n    clone() {\n      return new SymbolNode(this.name);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toString(options) {\n      return this.name;\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    toHTML(options) {\n      var name = escape(this.name);\n\n      if (name === 'true' || name === 'false') {\n        return '<span class=\"math-symbol math-boolean\">' + name + '</span>';\n      } else if (name === 'i') {\n        return '<span class=\"math-symbol math-imaginary-symbol\">' + name + '</span>';\n      } else if (name === 'Infinity') {\n        return '<span class=\"math-symbol math-infinity-symbol\">' + name + '</span>';\n      } else if (name === 'NaN') {\n        return '<span class=\"math-symbol math-nan-symbol\">' + name + '</span>';\n      } else if (name === 'null') {\n        return '<span class=\"math-symbol math-null-symbol\">' + name + '</span>';\n      } else if (name === 'undefined') {\n        return '<span class=\"math-symbol math-undefined-symbol\">' + name + '</span>';\n      }\n\n      return '<span class=\"math-symbol\">' + name + '</span>';\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: 'SymbolNode',\n        name: this.name\n      };\n    }\n    /**\n     * Instantiate a SymbolNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"SymbolNode\", name: \"x\"}`,\n     *                       where mathjs is optional\n     * @returns {SymbolNode}\n     */\n\n\n    static fromJSON(json) {\n      return new SymbolNode(json.name);\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toTex(options) {\n      var isUnit = false;\n\n      if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {\n        isUnit = true;\n      }\n\n      var symbol = toSymbol(this.name, isUnit);\n\n      if (symbol[0] === '\\\\') {\n        // no space needed if the symbol starts with '\\'\n        return symbol;\n      } // the space prevents symbols from breaking stuff like '\\cdot'\n      // if it's written right before the symbol\n\n\n      return ' ' + symbol;\n    }\n\n  }\n\n  return SymbolNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}