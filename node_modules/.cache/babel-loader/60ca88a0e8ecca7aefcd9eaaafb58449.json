{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { getPrecedence } from '../operators.js';\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { latexOperators } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'RelationalNode';\nvar dependencies = ['Node'];\nexport var createRelationalNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  var operatorMap = {\n    equal: '==',\n    unequal: '!=',\n    smaller: '<',\n    larger: '>',\n    smallerEq: '<=',\n    largerEq: '>='\n  };\n\n  class RelationalNode extends Node {\n    /**\n     * A node representing a chained conditional expression, such as 'x > y > z'\n     *\n     * @param {String[]} conditionals\n     *     An array of conditional operators used to compare the parameters\n     * @param {Node[]} params\n     *     The parameters that will be compared\n     *\n     * @constructor RelationalNode\n     * @extends {Node}\n     */\n    constructor(conditionals, params) {\n      super();\n\n      if (!Array.isArray(conditionals)) {\n        throw new TypeError('Parameter conditionals must be an array');\n      }\n\n      if (!Array.isArray(params)) {\n        throw new TypeError('Parameter params must be an array');\n      }\n\n      if (conditionals.length !== params.length - 1) {\n        throw new TypeError('Parameter params must contain exactly one more element ' + 'than parameter conditionals');\n      }\n\n      this.conditionals = conditionals;\n      this.params = params;\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isRelationalNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var self = this;\n      var compiled = this.params.map(p => p._compile(math, argNames));\n      return function evalRelationalNode(scope, args, context) {\n        var evalLhs;\n        var evalRhs = compiled[0](scope, args, context);\n\n        for (var i = 0; i < self.conditionals.length; i++) {\n          evalLhs = evalRhs;\n          evalRhs = compiled[i + 1](scope, args, context);\n          var condFn = getSafeProperty(math, self.conditionals[i]);\n\n          if (!condFn(evalLhs, evalRhs)) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      this.params.forEach((n, i) => callback(n, 'params[' + i + ']', this), this);\n    }\n    /**\n     * Create a new RelationalNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {RelationalNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      return new RelationalNode(this.conditionals.slice(), this.params.map((n, i) => this._ifNode(callback(n, 'params[' + i + ']', this)), this));\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {RelationalNode}\n     */\n\n\n    clone() {\n      return new RelationalNode(this.conditionals, this.params);\n    }\n    /**\n     * Get string representation.\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);\n      });\n      var ret = paramStrings[0];\n\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += ' ' + operatorMap[this.conditionals[i]];\n        ret += ' ' + paramStrings[i + 1];\n      }\n\n      return ret;\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        conditionals: this.conditionals,\n        params: this.params\n      };\n    }\n    /**\n     * Instantiate a RelationalNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"RelationalNode\", \"conditionals\": ..., \"params\": ...}`,\n     *     where mathjs is optional\n     * @returns {RelationalNode}\n     */\n\n\n    static fromJSON(json) {\n      return new RelationalNode(json.conditionals, json.params);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + p.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' : p.toHTML(options);\n      });\n      var ret = paramStrings[0];\n\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += '<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];\n      }\n\n      return ret;\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\\\left(' + p.toTex(options) + '\\right)' : p.toTex(options);\n      });\n      var ret = paramStrings[0];\n\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += latexOperators[this.conditionals[i]] + paramStrings[i + 1];\n      }\n\n      return ret;\n    }\n\n  }\n\n  _defineProperty(RelationalNode, \"name\", name);\n\n  return RelationalNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","getPrecedence","escape","getSafeProperty","latexOperators","factory","name","dependencies","createRelationalNode","_ref","Node","operatorMap","equal","unequal","smaller","larger","smallerEq","largerEq","RelationalNode","constructor","conditionals","params","Array","isArray","TypeError","length","type","isRelationalNode","_compile","math","argNames","self","compiled","map","p","evalRelationalNode","scope","args","context","evalLhs","evalRhs","i","condFn","forEach","callback","n","slice","_ifNode","clone","_toString","options","parenthesis","precedence","implicit","paramStrings","index","paramPrecedence","toString","ret","toJSON","mathjs","fromJSON","json","toHTML","_toTex","toTex","isClass","isNode"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/expression/node/RelationalNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { getPrecedence } from '../operators.js';\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { latexOperators } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'RelationalNode';\nvar dependencies = ['Node'];\nexport var createRelationalNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  var operatorMap = {\n    equal: '==',\n    unequal: '!=',\n    smaller: '<',\n    larger: '>',\n    smallerEq: '<=',\n    largerEq: '>='\n  };\n\n  class RelationalNode extends Node {\n    /**\n     * A node representing a chained conditional expression, such as 'x > y > z'\n     *\n     * @param {String[]} conditionals\n     *     An array of conditional operators used to compare the parameters\n     * @param {Node[]} params\n     *     The parameters that will be compared\n     *\n     * @constructor RelationalNode\n     * @extends {Node}\n     */\n    constructor(conditionals, params) {\n      super();\n\n      if (!Array.isArray(conditionals)) {\n        throw new TypeError('Parameter conditionals must be an array');\n      }\n\n      if (!Array.isArray(params)) {\n        throw new TypeError('Parameter params must be an array');\n      }\n\n      if (conditionals.length !== params.length - 1) {\n        throw new TypeError('Parameter params must contain exactly one more element ' + 'than parameter conditionals');\n      }\n\n      this.conditionals = conditionals;\n      this.params = params;\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isRelationalNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var self = this;\n      var compiled = this.params.map(p => p._compile(math, argNames));\n      return function evalRelationalNode(scope, args, context) {\n        var evalLhs;\n        var evalRhs = compiled[0](scope, args, context);\n\n        for (var i = 0; i < self.conditionals.length; i++) {\n          evalLhs = evalRhs;\n          evalRhs = compiled[i + 1](scope, args, context);\n          var condFn = getSafeProperty(math, self.conditionals[i]);\n\n          if (!condFn(evalLhs, evalRhs)) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      this.params.forEach((n, i) => callback(n, 'params[' + i + ']', this), this);\n    }\n    /**\n     * Create a new RelationalNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {RelationalNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      return new RelationalNode(this.conditionals.slice(), this.params.map((n, i) => this._ifNode(callback(n, 'params[' + i + ']', this)), this));\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {RelationalNode}\n     */\n\n\n    clone() {\n      return new RelationalNode(this.conditionals, this.params);\n    }\n    /**\n     * Get string representation.\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);\n      });\n      var ret = paramStrings[0];\n\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += ' ' + operatorMap[this.conditionals[i]];\n        ret += ' ' + paramStrings[i + 1];\n      }\n\n      return ret;\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        conditionals: this.conditionals,\n        params: this.params\n      };\n    }\n    /**\n     * Instantiate a RelationalNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"RelationalNode\", \"conditionals\": ..., \"params\": ...}`,\n     *     where mathjs is optional\n     * @returns {RelationalNode}\n     */\n\n\n    static fromJSON(json) {\n      return new RelationalNode(json.conditionals, json.params);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + p.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' : p.toHTML(options);\n      });\n      var ret = paramStrings[0];\n\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += '<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];\n      }\n\n      return ret;\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\\\left(' + p.toTex(options) + '\\right)' : p.toTex(options);\n      });\n      var ret = paramStrings[0];\n\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += latexOperators[this.conditionals[i]] + paramStrings[i + 1];\n      }\n\n      return ret;\n    }\n\n  }\n\n  _defineProperty(RelationalNode, \"name\", name);\n\n  return RelationalNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}