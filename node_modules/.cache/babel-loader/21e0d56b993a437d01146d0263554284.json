{"ast":null,"code":"import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nimport { leftShiftNumber } from '../../plain/number/index.js';\nimport { leftShiftBigNumber } from '../../utils/bignumber/bitwise.js';\nvar name = 'leftShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createLeftShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n  /**\n   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.leftShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.leftShift(1, 2)               // returns number 4\n   *\n   *    math.leftShift([1, 2, 4], 4)       // returns Array [16, 32, 64]\n   *\n   * See also:\n   *\n   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times\n   */\n\n  return typed(name, {\n    'number, number': leftShiftNumber,\n    'BigNumber, BigNumber': leftShiftBigNumber,\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});","map":{"version":3,"names":["createMatAlgo02xDS0","createMatAlgo11xS0s","createMatAlgo14xDs","createMatAlgo01xDSid","createMatAlgo10xSids","createMatAlgo08xS0Sid","factory","createMatrixAlgorithmSuite","createUseMatrixForArrayScalar","leftShiftNumber","leftShiftBigNumber","name","dependencies","createLeftShift","_ref","typed","matrix","equalScalar","zeros","DenseMatrix","matAlgo01xDSid","matAlgo02xDS0","matAlgo08xS0Sid","matAlgo10xSids","matAlgo11xS0s","matAlgo14xDs","matrixAlgorithmSuite","useMatrixForArrayScalar","referToSelf","self","x","y","clone","size","storage","SS","DS","SD"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/function/bitwise/leftShift.js"],"sourcesContent":["import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nimport { leftShiftNumber } from '../../plain/number/index.js';\nimport { leftShiftBigNumber } from '../../utils/bignumber/bitwise.js';\nvar name = 'leftShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createLeftShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n  /**\n   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.leftShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.leftShift(1, 2)               // returns number 4\n   *\n   *    math.leftShift([1, 2, 4], 4)       // returns Array [16, 32, 64]\n   *\n   * See also:\n   *\n   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times\n   */\n\n  return typed(name, {\n    'number, number': leftShiftNumber,\n    'BigNumber, BigNumber': leftShiftBigNumber,\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}