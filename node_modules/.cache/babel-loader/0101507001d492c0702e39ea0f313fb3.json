{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape, format } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { getSafeProperty, validateSafeMethod } from '../../utils/customs.js';\nimport { createSubScope } from '../../utils/scope.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Node,\n    SymbolNode\n  } = _ref;\n  /* format to fixed length */\n\n  var strin = entity => format(entity, {\n    truncate: 78\n  });\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n\n    var match;\n\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n\n              break;\n\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  }\n\n  class FunctionNode extends Node {\n    /**\n     * @constructor FunctionNode\n     * @extends {./Node}\n     * invoke a list with arguments on a node\n     * @param {./Node | string} fn\n     *     Item resolving to a function on which to invoke\n     *     the arguments, typically a SymboNode or AccessorNode\n     * @param {./Node[]} args\n     */\n    constructor(fn, args) {\n      super();\n\n      if (typeof fn === 'string') {\n        fn = new SymbolNode(fn);\n      } // validate input\n\n\n      if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n\n      this.fn = fn;\n      this.args = args || [];\n    } // readonly property name\n\n\n    get name() {\n      return this.fn.name || '';\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isFunctionNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      // compile arguments\n      var evalArgs = this.args.map(arg => arg._compile(math, argNames));\n\n      if (isSymbolNode(this.fn)) {\n        var _name = this.fn.name;\n\n        if (!argNames[_name]) {\n          // we can statically determine whether the function\n          // has the rawArgs property\n          var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n          var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n\n          var resolveFn = scope => {\n            var value;\n\n            if (scope.has(_name)) {\n              value = scope.get(_name);\n            } else if (_name in math) {\n              value = getSafeProperty(math, _name);\n            } else {\n              return FunctionNode.onUndefinedFunction(_name);\n            }\n\n            if (typeof value === 'function') {\n              return value;\n            }\n\n            throw new TypeError(\"'\".concat(_name, \"' is not a function; its value is:\\n  \").concat(strin(value)));\n          };\n\n          if (isRaw) {\n            // pass unevaluated parameters (nodes) to the function\n            // \"raw\" evaluation\n            var rawArgs = this.args;\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              return fn(rawArgs, math, createSubScope(scope, args), scope);\n            };\n          } else {\n            // \"regular\" evaluation\n            switch (evalArgs.length) {\n              case 0:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  return fn();\n                };\n\n              case 1:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  return fn(evalArg0(scope, args, context));\n                };\n\n              case 2:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  var evalArg1 = evalArgs[1];\n                  return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n                };\n\n              default:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n                  return fn(...values);\n                };\n            }\n          }\n        } else {\n          // the function symbol is an argName\n          var _rawArgs = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var fn = args[_name];\n\n            if (typeof fn !== 'function') {\n              throw new TypeError(\"Argument '\".concat(_name, \"' was not a function; received: \").concat(strin(fn)));\n            }\n\n            if (fn.rawArgs) {\n              // \"Raw\" evaluation\n              return fn(_rawArgs, math, createSubScope(scope, args), scope);\n            } else {\n              var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n              return fn.apply(fn, values);\n            }\n          };\n        }\n      } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n        // execute the function with the right context:\n        // the object of the AccessorNode\n        var evalObject = this.fn.object._compile(math, argNames);\n\n        var prop = this.fn.index.getObjectProperty();\n        var _rawArgs2 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          validateSafeMethod(object, prop);\n          var isRaw = object[prop] && object[prop].rawArgs;\n\n          if (isRaw) {\n            // \"Raw\" evaluation\n            return object[prop](_rawArgs2, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return object[prop].apply(object, values);\n          }\n        };\n      } else {\n        // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n        // we have to dynamically determine whether the function has the\n        // rawArgs property\n        var fnExpr = this.fn.toString();\n\n        var evalFn = this.fn._compile(math, argNames);\n\n        var _rawArgs3 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var fn = evalFn(scope, args, context);\n\n          if (typeof fn !== 'function') {\n            throw new TypeError(\"Expression '\".concat(fnExpr, \"' did not evaluate to a function; value is:\") + \"\\n  \".concat(strin(fn)));\n          }\n\n          if (fn.rawArgs) {\n            // \"Raw\" evaluation\n            return fn(_rawArgs3, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return fn.apply(fn, values);\n          }\n        };\n      }\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      callback(this.fn, 'fn', this);\n\n      for (var i = 0; i < this.args.length; i++) {\n        callback(this.args[i], 'args[' + i + ']', this);\n      }\n    }\n    /**\n     * Create a new FunctionNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var fn = this._ifNode(callback(this.fn, 'fn', this));\n\n      var args = [];\n\n      for (var i = 0; i < this.args.length; i++) {\n        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n      }\n\n      return new FunctionNode(fn, args);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionNode}\n     */\n\n\n    clone() {\n      return new FunctionNode(this.fn, this.args.slice(0));\n    }\n    /**\n     * Throws an error 'Undefined function {name}'\n     * @param {string} name\n     */\n\n    /**\n     * Get string representation. (wrapper function)\n     * This overrides parts of Node's toString function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toString\n     * function.\n     *\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    toString(options) {\n      var customString;\n      var name = this.fn.toString(options);\n\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n        // callback is a map of callback functions\n        customString = options.handler[name](this, options);\n      }\n\n      if (typeof customString !== 'undefined') {\n        return customString;\n      } // fall back to Node's toString\n\n\n      return super.toString(options);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toString(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toString(options);\n      });\n      var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n      return fn + '(' + args.join(', ') + ')';\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        fn: this.fn,\n        args: this.args\n      };\n    }\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n     *                       where mathjs is optional\n     * @returns {FunctionNode}\n     */\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    toHTML(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toHTML(options);\n      }); // format the arguments like \"add(2, 4.2)\"\n\n      return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n    /**\n     * Get LaTeX representation. (wrapper function)\n     * This overrides parts of Node's toTex function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toTex\n     * function.\n     *\n     * @param {Object} options\n     * @return {string}\n     */\n\n\n    toTex(options) {\n      var customTex;\n\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n        // callback is a map of callback functions\n        customTex = options.handler[this.name](this, options);\n      }\n\n      if (typeof customTex !== 'undefined') {\n        return customTex;\n      } // fall back to Node's toTex\n\n\n      return super.toTex(options);\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var args = this.args.map(function (arg) {\n        // get LaTeX of the arguments\n        return arg.toTex(options);\n      });\n      var latexConverter;\n\n      if (latexFunctions[this.name]) {\n        latexConverter = latexFunctions[this.name];\n      } // toTex property on the function itself\n\n\n      if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n        // .toTex is a callback function\n        latexConverter = math[this.name].toTex;\n      }\n\n      var customToTex;\n\n      switch (typeof latexConverter) {\n        case 'function':\n          // a callback function\n          customToTex = latexConverter(this, options);\n          break;\n\n        case 'string':\n          // a template string\n          customToTex = expandTemplate(latexConverter, this, options);\n          break;\n\n        case 'object':\n          // an object with different \"converters\" for different\n          // numbers of arguments\n          switch (typeof latexConverter[args.length]) {\n            case 'function':\n              customToTex = latexConverter[args.length](this, options);\n              break;\n\n            case 'string':\n              customToTex = expandTemplate(latexConverter[args.length], this, options);\n              break;\n          }\n\n      }\n\n      if (typeof customToTex !== 'undefined') {\n        return customToTex;\n      }\n\n      return expandTemplate(defaultTemplate, this, options);\n    }\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n\n\n    getIdentifier() {\n      return this.type + ':' + this.name;\n    }\n\n  }\n\n  _defineProperty(FunctionNode, \"name\", name);\n\n  _defineProperty(FunctionNode, \"onUndefinedFunction\", function (name) {\n    throw new Error('Undefined function ' + name);\n  });\n\n  _defineProperty(FunctionNode, \"fromJSON\", function (json) {\n    return new FunctionNode(json.fn, json.args);\n  });\n\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isAccessorNode","isFunctionAssignmentNode","isIndexNode","isNode","isSymbolNode","escape","format","hasOwnProperty","getSafeProperty","validateSafeMethod","createSubScope","factory","defaultTemplate","latexFunctions","name","dependencies","createFunctionNode","_ref","math","Node","SymbolNode","strin","entity","truncate","expandTemplate","template","node","options","latex","regex","inputPos","match","exec","substring","index","length","property","ReferenceError","undefined","toTex","Array","isArray","map","arg","TypeError","join","slice","FunctionNode","constructor","fn","args","every","type","isFunctionNode","_compile","argNames","evalArgs","_name","isRaw","rawArgs","resolveFn","scope","value","has","get","onUndefinedFunction","concat","evalFunctionNode","context","evalArg0","evalArg1","values","evalArg","_rawArgs","apply","isObjectProperty","evalObject","object","prop","getObjectProperty","_rawArgs2","fnExpr","toString","evalFn","_rawArgs3","forEach","callback","i","_ifNode","clone","customString","handler","_toString","toJSON","mathjs","toHTML","customTex","_toTex","latexConverter","customToTex","getIdentifier","Error","json","isClass"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/expression/node/FunctionNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape, format } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { getSafeProperty, validateSafeMethod } from '../../utils/customs.js';\nimport { createSubScope } from '../../utils/scope.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Node,\n    SymbolNode\n  } = _ref;\n\n  /* format to fixed length */\n  var strin = entity => format(entity, {\n    truncate: 78\n  });\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n\n    var match;\n\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n\n              break;\n\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  }\n\n  class FunctionNode extends Node {\n    /**\n     * @constructor FunctionNode\n     * @extends {./Node}\n     * invoke a list with arguments on a node\n     * @param {./Node | string} fn\n     *     Item resolving to a function on which to invoke\n     *     the arguments, typically a SymboNode or AccessorNode\n     * @param {./Node[]} args\n     */\n    constructor(fn, args) {\n      super();\n\n      if (typeof fn === 'string') {\n        fn = new SymbolNode(fn);\n      } // validate input\n\n\n      if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n\n      this.fn = fn;\n      this.args = args || [];\n    } // readonly property name\n\n\n    get name() {\n      return this.fn.name || '';\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isFunctionNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      // compile arguments\n      var evalArgs = this.args.map(arg => arg._compile(math, argNames));\n\n      if (isSymbolNode(this.fn)) {\n        var _name = this.fn.name;\n\n        if (!argNames[_name]) {\n          // we can statically determine whether the function\n          // has the rawArgs property\n          var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n          var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n\n          var resolveFn = scope => {\n            var value;\n\n            if (scope.has(_name)) {\n              value = scope.get(_name);\n            } else if (_name in math) {\n              value = getSafeProperty(math, _name);\n            } else {\n              return FunctionNode.onUndefinedFunction(_name);\n            }\n\n            if (typeof value === 'function') {\n              return value;\n            }\n\n            throw new TypeError(\"'\".concat(_name, \"' is not a function; its value is:\\n  \").concat(strin(value)));\n          };\n\n          if (isRaw) {\n            // pass unevaluated parameters (nodes) to the function\n            // \"raw\" evaluation\n            var rawArgs = this.args;\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              return fn(rawArgs, math, createSubScope(scope, args), scope);\n            };\n          } else {\n            // \"regular\" evaluation\n            switch (evalArgs.length) {\n              case 0:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  return fn();\n                };\n\n              case 1:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  return fn(evalArg0(scope, args, context));\n                };\n\n              case 2:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  var evalArg1 = evalArgs[1];\n                  return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n                };\n\n              default:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n                  return fn(...values);\n                };\n            }\n          }\n        } else {\n          // the function symbol is an argName\n          var _rawArgs = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var fn = args[_name];\n\n            if (typeof fn !== 'function') {\n              throw new TypeError(\"Argument '\".concat(_name, \"' was not a function; received: \").concat(strin(fn)));\n            }\n\n            if (fn.rawArgs) {\n              // \"Raw\" evaluation\n              return fn(_rawArgs, math, createSubScope(scope, args), scope);\n            } else {\n              var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n              return fn.apply(fn, values);\n            }\n          };\n        }\n      } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n        // execute the function with the right context:\n        // the object of the AccessorNode\n        var evalObject = this.fn.object._compile(math, argNames);\n\n        var prop = this.fn.index.getObjectProperty();\n        var _rawArgs2 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          validateSafeMethod(object, prop);\n          var isRaw = object[prop] && object[prop].rawArgs;\n\n          if (isRaw) {\n            // \"Raw\" evaluation\n            return object[prop](_rawArgs2, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return object[prop].apply(object, values);\n          }\n        };\n      } else {\n        // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n        // we have to dynamically determine whether the function has the\n        // rawArgs property\n        var fnExpr = this.fn.toString();\n\n        var evalFn = this.fn._compile(math, argNames);\n\n        var _rawArgs3 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var fn = evalFn(scope, args, context);\n\n          if (typeof fn !== 'function') {\n            throw new TypeError(\"Expression '\".concat(fnExpr, \"' did not evaluate to a function; value is:\") + \"\\n  \".concat(strin(fn)));\n          }\n\n          if (fn.rawArgs) {\n            // \"Raw\" evaluation\n            return fn(_rawArgs3, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return fn.apply(fn, values);\n          }\n        };\n      }\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      callback(this.fn, 'fn', this);\n\n      for (var i = 0; i < this.args.length; i++) {\n        callback(this.args[i], 'args[' + i + ']', this);\n      }\n    }\n    /**\n     * Create a new FunctionNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var fn = this._ifNode(callback(this.fn, 'fn', this));\n\n      var args = [];\n\n      for (var i = 0; i < this.args.length; i++) {\n        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n      }\n\n      return new FunctionNode(fn, args);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionNode}\n     */\n\n\n    clone() {\n      return new FunctionNode(this.fn, this.args.slice(0));\n    }\n    /**\n     * Throws an error 'Undefined function {name}'\n     * @param {string} name\n     */\n\n\n    /**\n     * Get string representation. (wrapper function)\n     * This overrides parts of Node's toString function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toString\n     * function.\n     *\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toString(options) {\n      var customString;\n      var name = this.fn.toString(options);\n\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n        // callback is a map of callback functions\n        customString = options.handler[name](this, options);\n      }\n\n      if (typeof customString !== 'undefined') {\n        return customString;\n      } // fall back to Node's toString\n\n\n      return super.toString(options);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toString(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toString(options);\n      });\n      var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n      return fn + '(' + args.join(', ') + ')';\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        fn: this.fn,\n        args: this.args\n      };\n    }\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n     *                       where mathjs is optional\n     * @returns {FunctionNode}\n     */\n\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toHTML(options);\n      }); // format the arguments like \"add(2, 4.2)\"\n\n      return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n    /**\n     * Get LaTeX representation. (wrapper function)\n     * This overrides parts of Node's toTex function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toTex\n     * function.\n     *\n     * @param {Object} options\n     * @return {string}\n     */\n\n\n    toTex(options) {\n      var customTex;\n\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n        // callback is a map of callback functions\n        customTex = options.handler[this.name](this, options);\n      }\n\n      if (typeof customTex !== 'undefined') {\n        return customTex;\n      } // fall back to Node's toTex\n\n\n      return super.toTex(options);\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var args = this.args.map(function (arg) {\n        // get LaTeX of the arguments\n        return arg.toTex(options);\n      });\n      var latexConverter;\n\n      if (latexFunctions[this.name]) {\n        latexConverter = latexFunctions[this.name];\n      } // toTex property on the function itself\n\n\n      if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n        // .toTex is a callback function\n        latexConverter = math[this.name].toTex;\n      }\n\n      var customToTex;\n\n      switch (typeof latexConverter) {\n        case 'function':\n          // a callback function\n          customToTex = latexConverter(this, options);\n          break;\n\n        case 'string':\n          // a template string\n          customToTex = expandTemplate(latexConverter, this, options);\n          break;\n\n        case 'object':\n          // an object with different \"converters\" for different\n          // numbers of arguments\n          switch (typeof latexConverter[args.length]) {\n            case 'function':\n              customToTex = latexConverter[args.length](this, options);\n              break;\n\n            case 'string':\n              customToTex = expandTemplate(latexConverter[args.length], this, options);\n              break;\n          }\n\n      }\n\n      if (typeof customToTex !== 'undefined') {\n        return customToTex;\n      }\n\n      return expandTemplate(defaultTemplate, this, options);\n    }\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n\n\n    getIdentifier() {\n      return this.type + ':' + this.name;\n    }\n\n  }\n\n  _defineProperty(FunctionNode, \"name\", name);\n\n  _defineProperty(FunctionNode, \"onUndefinedFunction\", function (name) {\n    throw new Error('Undefined function ' + name);\n  });\n\n  _defineProperty(FunctionNode, \"fromJSON\", function (json) {\n    return new FunctionNode(json.fn, json.args);\n  });\n\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}