{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { escape, stringify } from '../../utils/string.js';\nimport { isSafeProperty } from '../../utils/customs.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ObjectNode';\nvar dependencies = ['Node'];\nexport var createObjectNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  class ObjectNode extends Node {\n    /**\n     * @constructor ObjectNode\n     * @extends {Node}\n     * Holds an object with keys/values\n     * @param {Object.<string, Node>} [properties]   object with key/value pairs\n     */\n    constructor(properties) {\n      super();\n      this.properties = properties || {}; // validate input\n\n      if (properties) {\n        if (!(typeof properties === 'object') || !Object.keys(properties).every(function (key) {\n          return isNode(properties[key]);\n        })) {\n          throw new TypeError('Object containing Nodes expected');\n        }\n      }\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isObjectNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var evalEntries = {};\n\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          // we stringify/parse the key here to resolve unicode characters,\n          // so you cannot create a key like {\"co\\\\u006Estructor\": null}\n          var stringifiedKey = stringify(key);\n          var parsedKey = JSON.parse(stringifiedKey);\n\n          if (!isSafeProperty(this.properties, parsedKey)) {\n            throw new Error('No access to property \"' + parsedKey + '\"');\n          }\n\n          evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);\n        }\n      }\n\n      return function evalObjectNode(scope, args, context) {\n        var obj = {};\n\n        for (var _key in evalEntries) {\n          if (hasOwnProperty(evalEntries, _key)) {\n            obj[_key] = evalEntries[_key](scope, args, context);\n          }\n        }\n\n        return obj;\n      };\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          callback(this.properties[key], 'properties[' + stringify(key) + ']', this);\n        }\n      }\n    }\n    /**\n     * Create a new ObjectNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {ObjectNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var properties = {};\n\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + stringify(key) + ']', this));\n        }\n      }\n\n      return new ObjectNode(properties);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ObjectNode}\n     */\n\n\n    clone() {\n      var properties = {};\n\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          properties[key] = this.properties[key];\n        }\n      }\n\n      return new ObjectNode(properties);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toString(options) {\n      var entries = [];\n\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          entries.push(stringify(key) + ': ' + this.properties[key].toString(options));\n        }\n      }\n\n      return '{' + entries.join(', ') + '}';\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        properties: this.properties\n      };\n    }\n    /**\n     * Instantiate an OperatorNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"ObjectNode\", \"properties\": {...}}`,\n     *                       where mathjs is optional\n     * @returns {ObjectNode}\n     */\n\n\n    static fromJSON(json) {\n      return new ObjectNode(json.properties);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    toHTML(options) {\n      var entries = [];\n\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          entries.push('<span class=\"math-symbol math-property\">' + escape(key) + '</span>' + '<span class=\"math-operator math-assignment-operator ' + 'math-property-assignment-operator math-binary-operator\">' + ':</span>' + this.properties[key].toHTML(options));\n        }\n      }\n\n      return '<span class=\"math-parenthesis math-curly-parenthesis\">{</span>' + entries.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-curly-parenthesis\">}</span>';\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var entries = [];\n\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          entries.push('\\\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\\\\\');\n        }\n      }\n\n      var tex = '\\\\left\\\\{\\\\begin{array}{ll}' + entries.join('\\n') + '\\\\end{array}\\\\right\\\\}';\n      return tex;\n    }\n\n  }\n\n  _defineProperty(ObjectNode, \"name\", name);\n\n  return ObjectNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isNode","escape","stringify","isSafeProperty","hasOwnProperty","factory","name","dependencies","createObjectNode","_ref","Node","ObjectNode","constructor","properties","Object","keys","every","key","TypeError","type","isObjectNode","_compile","math","argNames","evalEntries","stringifiedKey","parsedKey","JSON","parse","Error","evalObjectNode","scope","args","context","obj","_key","forEach","callback","map","_ifNode","clone","_toString","options","entries","push","toString","join","toJSON","mathjs","fromJSON","json","toHTML","_toTex","toTex","tex","isClass"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/expression/node/ObjectNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { escape, stringify } from '../../utils/string.js';\nimport { isSafeProperty } from '../../utils/customs.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ObjectNode';\nvar dependencies = ['Node'];\nexport var createObjectNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  class ObjectNode extends Node {\n    /**\n     * @constructor ObjectNode\n     * @extends {Node}\n     * Holds an object with keys/values\n     * @param {Object.<string, Node>} [properties]   object with key/value pairs\n     */\n    constructor(properties) {\n      super();\n      this.properties = properties || {}; // validate input\n\n      if (properties) {\n        if (!(typeof properties === 'object') || !Object.keys(properties).every(function (key) {\n          return isNode(properties[key]);\n        })) {\n          throw new TypeError('Object containing Nodes expected');\n        }\n      }\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isObjectNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var evalEntries = {};\n\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          // we stringify/parse the key here to resolve unicode characters,\n          // so you cannot create a key like {\"co\\\\u006Estructor\": null}\n          var stringifiedKey = stringify(key);\n          var parsedKey = JSON.parse(stringifiedKey);\n\n          if (!isSafeProperty(this.properties, parsedKey)) {\n            throw new Error('No access to property \"' + parsedKey + '\"');\n          }\n\n          evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);\n        }\n      }\n\n      return function evalObjectNode(scope, args, context) {\n        var obj = {};\n\n        for (var _key in evalEntries) {\n          if (hasOwnProperty(evalEntries, _key)) {\n            obj[_key] = evalEntries[_key](scope, args, context);\n          }\n        }\n\n        return obj;\n      };\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          callback(this.properties[key], 'properties[' + stringify(key) + ']', this);\n        }\n      }\n    }\n    /**\n     * Create a new ObjectNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {ObjectNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var properties = {};\n\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + stringify(key) + ']', this));\n        }\n      }\n\n      return new ObjectNode(properties);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ObjectNode}\n     */\n\n\n    clone() {\n      var properties = {};\n\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          properties[key] = this.properties[key];\n        }\n      }\n\n      return new ObjectNode(properties);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toString(options) {\n      var entries = [];\n\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          entries.push(stringify(key) + ': ' + this.properties[key].toString(options));\n        }\n      }\n\n      return '{' + entries.join(', ') + '}';\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        properties: this.properties\n      };\n    }\n    /**\n     * Instantiate an OperatorNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"ObjectNode\", \"properties\": {...}}`,\n     *                       where mathjs is optional\n     * @returns {ObjectNode}\n     */\n\n\n    static fromJSON(json) {\n      return new ObjectNode(json.properties);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    toHTML(options) {\n      var entries = [];\n\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          entries.push('<span class=\"math-symbol math-property\">' + escape(key) + '</span>' + '<span class=\"math-operator math-assignment-operator ' + 'math-property-assignment-operator math-binary-operator\">' + ':</span>' + this.properties[key].toHTML(options));\n        }\n      }\n\n      return '<span class=\"math-parenthesis math-curly-parenthesis\">{</span>' + entries.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-curly-parenthesis\">}</span>';\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var entries = [];\n\n      for (var key in this.properties) {\n        if (hasOwnProperty(this.properties, key)) {\n          entries.push('\\\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\\\\\');\n        }\n      }\n\n      var tex = '\\\\left\\\\{\\\\begin{array}{ll}' + entries.join('\\n') + '\\\\end{array}\\\\right\\\\}';\n      return tex;\n    }\n\n  }\n\n  _defineProperty(ObjectNode, \"name\", name);\n\n  return ObjectNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}