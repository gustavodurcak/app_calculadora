{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smallerEq';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];\nexport var createSmallerEq = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n  /**\n   * Test whether value x is smaller or equal to y.\n   *\n   * The function returns true when x is smaller than y or the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smallerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(1 + 2, 3)        // returns false\n   *    math.smallerEq(1 + 2, 3)      // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n\n  return typed(name, createSmallerEqNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x <= y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) !== 1,\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerEqNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x <= y || nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","map":{"version":3,"names":["nearlyEqual","bigNearlyEqual","factory","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo12xSfs","createMatrixAlgorithmSuite","createCompareUnits","name","dependencies","createSmallerEq","_ref","typed","config","matrix","DenseMatrix","matAlgo03xDSf","matAlgo07xSSf","matAlgo12xSfs","matrixAlgorithmSuite","compareUnits","createSmallerEqNumber","x","y","BigNumberBigNumber","lte","epsilon","compare","ComplexComplex","TypeError","SS","DS","Ss","_ref2","numberNumber"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/function/relational/smallerEq.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smallerEq';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];\nexport var createSmallerEq = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n  /**\n   * Test whether value x is smaller or equal to y.\n   *\n   * The function returns true when x is smaller than y or the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smallerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(1 + 2, 3)        // returns false\n   *    math.smallerEq(1 + 2, 3)      // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n\n  return typed(name, createSmallerEqNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x <= y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) !== 1,\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerEqNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x <= y || nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,WAAW,IAAIC,cAAxB,QAA8C,sCAA9C;AACA,SAASD,WAAT,QAA4B,uBAA5B;AACA,SAASE,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,0BAAT,QAA2C,iDAA3C;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,EAA8B,aAA9B,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeR,OAAO,CAACM,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;EAC9E,IAAI;IACFC,KADE;IAEFC,MAFE;IAGFC,MAHE;IAIFC;EAJE,IAKAJ,IALJ;EAMA,IAAIK,aAAa,GAAGb,mBAAmB,CAAC;IACtCS;EADsC,CAAD,CAAvC;EAGA,IAAIK,aAAa,GAAGb,mBAAmB,CAAC;IACtCQ,KADsC;IAEtCG;EAFsC,CAAD,CAAvC;EAIA,IAAIG,aAAa,GAAGb,mBAAmB,CAAC;IACtCO,KADsC;IAEtCG;EAFsC,CAAD,CAAvC;EAIA,IAAII,oBAAoB,GAAGb,0BAA0B,CAAC;IACpDM,KADoD;IAEpDE;EAFoD,CAAD,CAArD;EAIA,IAAIM,YAAY,GAAGb,kBAAkB,CAAC;IACpCK;EADoC,CAAD,CAArC;EAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOA,KAAK,CAACJ,IAAD,EAAOa,qBAAqB,CAAC;IACvCT,KADuC;IAEvCC;EAFuC,CAAD,CAA5B,EAGR;IACF,oBAAoB,CAACS,CAAD,EAAIC,CAAJ,KAAUD,CAAC,IAAIC,CADjC;IAEF,wBAAwB,SAASC,kBAAT,CAA4BF,CAA5B,EAA+BC,CAA/B,EAAkC;MACxD,OAAOD,CAAC,CAACG,GAAF,CAAMF,CAAN,KAAYtB,cAAc,CAACqB,CAAD,EAAIC,CAAJ,EAAOV,MAAM,CAACa,OAAd,CAAjC;IACD,CAJC;IAKF,sBAAsB,CAACJ,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACK,OAAF,CAAUJ,CAAV,MAAiB,CAL/C;IAMF,oBAAoB,SAASK,cAAT,GAA0B;MAC5C,MAAM,IAAIC,SAAJ,CAAc,qDAAd,CAAN;IACD;EARC,CAHQ,EAYTT,YAZS,EAYKD,oBAAoB,CAAC;IACpCW,EAAE,EAAEb,aADgC;IAEpCc,EAAE,EAAEf,aAFgC;IAGpCgB,EAAE,EAAEd;EAHgC,CAAD,CAZzB,CAAZ;AAiBD,CAtEkD,CAA5C;AAuEP,OAAO,IAAIG,qBAAqB,GAAG,eAAenB,OAAO,CAACM,IAAD,EAAO,CAAC,OAAD,EAAU,QAAV,CAAP,EAA4ByB,KAAK,IAAI;EAC5F,IAAI;IACFrB,KADE;IAEFC;EAFE,IAGAoB,KAHJ;EAIA,OAAOrB,KAAK,CAACJ,IAAD,EAAO;IACjB,kBAAkB,SAAS0B,YAAT,CAAsBZ,CAAtB,EAAyBC,CAAzB,EAA4B;MAC5C,OAAOD,CAAC,IAAIC,CAAL,IAAUvB,WAAW,CAACsB,CAAD,EAAIC,CAAJ,EAAOV,MAAM,CAACa,OAAd,CAA5B;IACD;EAHgB,CAAP,CAAZ;AAKD,CAVwD,CAAlD"},"metadata":{},"sourceType":"module"}