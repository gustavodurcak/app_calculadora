{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ParenthesisNode';\nvar dependencies = ['Node'];\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  class ParenthesisNode extends Node {\n    /**\n     * @constructor ParenthesisNode\n     * @extends {Node}\n     * A parenthesis node describes manual parenthesis from the user input\n     * @param {Node} content\n     * @extends {Node}\n     */\n    constructor(content) {\n      super(); // validate input\n\n      if (!isNode(content)) {\n        throw new TypeError('Node expected for parameter \"content\"');\n      }\n\n      this.content = content;\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isParenthesisNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      return this.content._compile(math, argNames);\n    }\n    /**\n     * Get the content of the current Node.\n     * @return {Node} content\n     * @override\n     **/\n\n\n    getContent() {\n      return this.content.getContent();\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      callback(this.content, 'content', this);\n    }\n    /**\n     * Create a new ParenthesisNode whose child is the result of calling\n     * the provided callback function on the child of this node.\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\n     * @returns {ParenthesisNode} Returns a clone of the node\n     */\n\n\n    map(callback) {\n      var content = callback(this.content, 'content', this);\n      return new ParenthesisNode(content);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ParenthesisNode}\n     */\n\n\n    clone() {\n      return new ParenthesisNode(this.content);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toString(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '(' + this.content.toString(options) + ')';\n      }\n\n      return this.content.toString(options);\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        content: this.content\n      };\n    }\n    /**\n     * Instantiate an ParenthesisNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n     *                       where mathjs is optional\n     * @returns {ParenthesisNode}\n     */\n\n\n    static fromJSON(json) {\n      return new ParenthesisNode(json.content);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    toHTML(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      return this.content.toHTML(options);\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toTex(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n      }\n\n      return this.content.toTex(options);\n    }\n\n  }\n\n  _defineProperty(ParenthesisNode, \"name\", name);\n\n  return ParenthesisNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isNode","factory","name","dependencies","createParenthesisNode","_ref","Node","ParenthesisNode","constructor","content","TypeError","type","isParenthesisNode","_compile","math","argNames","getContent","forEach","callback","map","clone","_toString","options","parenthesis","toString","toJSON","mathjs","fromJSON","json","toHTML","_toTex","concat","toTex","isClass"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/expression/node/ParenthesisNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ParenthesisNode';\nvar dependencies = ['Node'];\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  class ParenthesisNode extends Node {\n    /**\n     * @constructor ParenthesisNode\n     * @extends {Node}\n     * A parenthesis node describes manual parenthesis from the user input\n     * @param {Node} content\n     * @extends {Node}\n     */\n    constructor(content) {\n      super(); // validate input\n\n      if (!isNode(content)) {\n        throw new TypeError('Node expected for parameter \"content\"');\n      }\n\n      this.content = content;\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isParenthesisNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      return this.content._compile(math, argNames);\n    }\n    /**\n     * Get the content of the current Node.\n     * @return {Node} content\n     * @override\n     **/\n\n\n    getContent() {\n      return this.content.getContent();\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      callback(this.content, 'content', this);\n    }\n    /**\n     * Create a new ParenthesisNode whose child is the result of calling\n     * the provided callback function on the child of this node.\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\n     * @returns {ParenthesisNode} Returns a clone of the node\n     */\n\n\n    map(callback) {\n      var content = callback(this.content, 'content', this);\n      return new ParenthesisNode(content);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ParenthesisNode}\n     */\n\n\n    clone() {\n      return new ParenthesisNode(this.content);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toString(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '(' + this.content.toString(options) + ')';\n      }\n\n      return this.content.toString(options);\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        content: this.content\n      };\n    }\n    /**\n     * Instantiate an ParenthesisNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n     *                       where mathjs is optional\n     * @returns {ParenthesisNode}\n     */\n\n\n    static fromJSON(json) {\n      return new ParenthesisNode(json.content);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    toHTML(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      return this.content.toHTML(options);\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toTex(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n      }\n\n      return this.content.toTex(options);\n    }\n\n  }\n\n  _defineProperty(ParenthesisNode, \"name\", name);\n\n  return ParenthesisNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}