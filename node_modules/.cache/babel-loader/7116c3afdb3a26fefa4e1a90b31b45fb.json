{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { gammaG, gammaNumber, gammaP } from '../../plain/number/index.js';\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nexport var createGamma = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    pow,\n    BigNumber: _BigNumber,\n    Complex\n  } = _ref;\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * To avoid confusion with the matrix Gamma function, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | BigNumber | Complex} n   A real or complex number\n   * @return {number | BigNumber | Complex}    The gamma of `n`\n   */\n\n  function gammaComplex(n) {\n    if (n.im === 0) {\n      return gammaNumber(n.re);\n    } // Lanczos approximation doesn't work well with real part lower than 0.5\n    // So reflection formula is required\n\n\n    if (n.re < 0.5) {\n      // Euler's reflection formula\n      // gamma(1-z) * gamma(z) = PI / sin(PI * z)\n      // real part of Z should not be integer [sin(PI) == 0 -> 1/0 - undefined]\n      // thanks to imperfect sin implementation sin(PI * n) != 0\n      // we can safely use it anyway\n      var _t = new Complex(1 - n.re, -n.im);\n\n      var r = new Complex(Math.PI * n.re, Math.PI * n.im);\n      return new Complex(Math.PI).div(r.sin()).div(gammaComplex(_t));\n    } // Lanczos approximation\n    // z -= 1\n\n\n    n = new Complex(n.re - 1, n.im); // x = gammaPval[0]\n\n    var x = new Complex(gammaP[0], 0); // for (i, gammaPval) in enumerate(gammaP):\n\n    for (var i = 1; i < gammaP.length; ++i) {\n      // x += gammaPval / (z + i)\n      var gammaPval = new Complex(gammaP[i], 0);\n      x = x.add(gammaPval.div(n.add(i)));\n    } // t = z + gammaG + 0.5\n\n\n    var t = new Complex(n.re + gammaG + 0.5, n.im); // y = sqrt(2 * pi) * t ** (z + 0.5) * exp(-t) * x\n\n    var twoPiSqrt = Math.sqrt(2 * Math.PI);\n    var tpow = t.pow(n.add(0.5));\n    var expt = t.neg().exp(); // y = [x] * [sqrt(2 * pi)] * [t ** (z + 0.5)] * [exp(-t)]\n\n    return x.mul(twoPiSqrt).mul(tpow).mul(expt);\n  }\n\n  return typed(name, {\n    number: gammaNumber,\n    Complex: gammaComplex,\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n\n      throw new Error('Integer BigNumber expected');\n    }\n  });\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n\n    var Big = _BigNumber.clone({\n      precision\n    });\n\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});","map":{"version":3,"names":["factory","gammaG","gammaNumber","gammaP","name","dependencies","createGamma","_ref","typed","config","multiplyScalar","pow","BigNumber","_BigNumber","Complex","gammaComplex","n","im","re","_t","r","Math","PI","div","sin","x","i","length","gammaPval","add","t","twoPiSqrt","sqrt","tpow","expt","neg","exp","mul","number","isInteger","isNegative","isZero","Infinity","bigFactorial","minus","isFinite","NaN","Error","precision","log","toNumber","Big","clone","times","p","prod","sum","toPrecision"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/function/probability/gamma.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { gammaG, gammaNumber, gammaP } from '../../plain/number/index.js';\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nexport var createGamma = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    pow,\n    BigNumber: _BigNumber,\n    Complex\n  } = _ref;\n\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * To avoid confusion with the matrix Gamma function, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | BigNumber | Complex} n   A real or complex number\n   * @return {number | BigNumber | Complex}    The gamma of `n`\n   */\n  function gammaComplex(n) {\n    if (n.im === 0) {\n      return gammaNumber(n.re);\n    } // Lanczos approximation doesn't work well with real part lower than 0.5\n    // So reflection formula is required\n\n\n    if (n.re < 0.5) {\n      // Euler's reflection formula\n      // gamma(1-z) * gamma(z) = PI / sin(PI * z)\n      // real part of Z should not be integer [sin(PI) == 0 -> 1/0 - undefined]\n      // thanks to imperfect sin implementation sin(PI * n) != 0\n      // we can safely use it anyway\n      var _t = new Complex(1 - n.re, -n.im);\n\n      var r = new Complex(Math.PI * n.re, Math.PI * n.im);\n      return new Complex(Math.PI).div(r.sin()).div(gammaComplex(_t));\n    } // Lanczos approximation\n    // z -= 1\n\n\n    n = new Complex(n.re - 1, n.im); // x = gammaPval[0]\n\n    var x = new Complex(gammaP[0], 0); // for (i, gammaPval) in enumerate(gammaP):\n\n    for (var i = 1; i < gammaP.length; ++i) {\n      // x += gammaPval / (z + i)\n      var gammaPval = new Complex(gammaP[i], 0);\n      x = x.add(gammaPval.div(n.add(i)));\n    } // t = z + gammaG + 0.5\n\n\n    var t = new Complex(n.re + gammaG + 0.5, n.im); // y = sqrt(2 * pi) * t ** (z + 0.5) * exp(-t) * x\n\n    var twoPiSqrt = Math.sqrt(2 * Math.PI);\n    var tpow = t.pow(n.add(0.5));\n    var expt = t.neg().exp(); // y = [x] * [sqrt(2 * pi)] * [t ** (z + 0.5)] * [exp(-t)]\n\n    return x.mul(twoPiSqrt).mul(tpow).mul(expt);\n  }\n\n  return typed(name, {\n    number: gammaNumber,\n    Complex: gammaComplex,\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n\n      throw new Error('Integer BigNumber expected');\n    }\n  });\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n\n    var Big = _BigNumber.clone({\n      precision\n    });\n\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}