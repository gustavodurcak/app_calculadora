{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'unit';\nvar dependencies = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit\n\nexport var createUnitFunction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Unit\n  } = _ref;\n  /**\n   * Create a unit. Depending on the passed arguments, the function\n   * will create and return a new math.Unit object.\n   * When a matrix is provided, all elements will be converted to units.\n   *\n   * Syntax:\n   *\n   *     math.unit(unit : string)\n   *     math.unit(value : number, valuelessUnit : Unit)\n   *     math.unit(value : number, valuelessUnit : string)\n   *\n   * Examples:\n   *\n   *    const kph = math.unit('km/h')   // returns Unit km/h (valueless)\n   *    const v = math.unit(25, kph)    // returns Unit 25 km/h\n   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm\n   *    const b = math.unit('23 kg')    // returns Unit 23 kg\n   *    a.to('m')                       // returns Unit 0.05 m\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n   *\n   * @param {* | Array | Matrix} args   A number and unit.\n   * @return {Unit | Array | Matrix}    The created unit\n   */\n\n  return typed(name, {\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      if (Unit.isValuelessUnit(x)) {\n        return new Unit(null, x); // a pure unit\n      }\n\n      return Unit.parse(x, {\n        allowNoUnits: true\n      }); // a unit with value, like '5cm'\n    },\n    'number | BigNumber | Fraction | Complex, string | Unit': function numberBigNumberFractionComplexStringUnit(value, unit) {\n      return new Unit(value, unit);\n    },\n    'number | BigNumber | Fraction': function numberBigNumberFraction(value) {\n      // dimensionless\n      return new Unit(value);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createUnitFunction","_ref","typed","Unit","x","clone","string","isValuelessUnit","parse","allowNoUnits","numberBigNumberFractionComplexStringUnit","value","unit","numberBigNumberFraction","referToSelf","self"],"sources":["/Users/gustavodurcak/node_modules/mathjs/lib/esm/type/unit/function/unit.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'unit';\nvar dependencies = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit\n\nexport var createUnitFunction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Unit\n  } = _ref;\n\n  /**\n   * Create a unit. Depending on the passed arguments, the function\n   * will create and return a new math.Unit object.\n   * When a matrix is provided, all elements will be converted to units.\n   *\n   * Syntax:\n   *\n   *     math.unit(unit : string)\n   *     math.unit(value : number, valuelessUnit : Unit)\n   *     math.unit(value : number, valuelessUnit : string)\n   *\n   * Examples:\n   *\n   *    const kph = math.unit('km/h')   // returns Unit km/h (valueless)\n   *    const v = math.unit(25, kph)    // returns Unit 25 km/h\n   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm\n   *    const b = math.unit('23 kg')    // returns Unit 23 kg\n   *    a.to('m')                       // returns Unit 0.05 m\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n   *\n   * @param {* | Array | Matrix} args   A number and unit.\n   * @return {Unit | Array | Matrix}    The created unit\n   */\n  return typed(name, {\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      if (Unit.isValuelessUnit(x)) {\n        return new Unit(null, x); // a pure unit\n      }\n\n      return Unit.parse(x, {\n        allowNoUnits: true\n      }); // a unit with value, like '5cm'\n    },\n    'number | BigNumber | Fraction | Complex, string | Unit': function numberBigNumberFractionComplexStringUnit(value, unit) {\n      return new Unit(value, unit);\n    },\n    'number | BigNumber | Fraction': function numberBigNumberFraction(value) {\n      // dimensionless\n      return new Unit(value);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,CAAnB,C,CAAsC;;AAEtC,OAAO,IAAIC,kBAAkB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;EACjF,IAAI;IACFC,KADE;IAEFC;EAFE,IAGAF,IAHJ;EAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOC,KAAK,CAACJ,IAAD,EAAO;IACjBK,IAAI,EAAE,SAASA,IAAT,CAAcC,CAAd,EAAiB;MACrB,OAAOA,CAAC,CAACC,KAAF,EAAP;IACD,CAHgB;IAIjBC,MAAM,EAAE,SAASA,MAAT,CAAgBF,CAAhB,EAAmB;MACzB,IAAID,IAAI,CAACI,eAAL,CAAqBH,CAArB,CAAJ,EAA6B;QAC3B,OAAO,IAAID,IAAJ,CAAS,IAAT,EAAeC,CAAf,CAAP,CAD2B,CACD;MAC3B;;MAED,OAAOD,IAAI,CAACK,KAAL,CAAWJ,CAAX,EAAc;QACnBK,YAAY,EAAE;MADK,CAAd,CAAP,CALyB,CAOrB;IACL,CAZgB;IAajB,0DAA0D,SAASC,wCAAT,CAAkDC,KAAlD,EAAyDC,IAAzD,EAA+D;MACvH,OAAO,IAAIT,IAAJ,CAASQ,KAAT,EAAgBC,IAAhB,CAAP;IACD,CAfgB;IAgBjB,iCAAiC,SAASC,uBAAT,CAAiCF,KAAjC,EAAwC;MACvE;MACA,OAAO,IAAIR,IAAJ,CAASQ,KAAT,CAAP;IACD,CAnBgB;IAoBjB,kBAAkBT,KAAK,CAACY,WAAN,CAAkBC,IAAI,IAAIX,CAAC,IAAIP,OAAO,CAACO,CAAD,EAAIW,IAAJ,CAAtC;EApBD,CAAP,CAAZ;AAsBD,CAtDqD,CAA/C"},"metadata":{},"sourceType":"module"}